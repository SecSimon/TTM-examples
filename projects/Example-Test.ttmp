{"content":"{\n  \"Data\": {\n    \"ID\": \"7e6faac1-e480-4204-b2a2-57b0cb43e2cd\",\n    \"Name\": \"Example-Test.ttmp\",\n    \"Description\": \"\",\n    \"Version\": 1,\n    \"ProgressTracker\": {},\n    \"Participants\": [],\n    \"UserVersion\": \"1\"\n  },\n  \"charSope\": {\n    \"ID\": \"251b529f-8c4b-4392-b788-22a4ef4e852d\",\n    \"Name\": \"\",\n    \"Description\": \"\",\n    \"Sector\": [],\n    \"Function\": [],\n    \"Application\": [],\n    \"Requirements\": [],\n    \"Criticality\": [],\n    \"LocEnv\": [],\n    \"Connectivity\": [],\n    \"TargetMarket\": [],\n    \"Standards\": [],\n    \"InvolvedPeople\": [],\n    \"Budget\": [],\n    \"Timeframe\": [],\n    \"ExpectedOutput\": [],\n    \"Assumptions\": []\n  },\n  \"objImpact\": {\n    \"ID\": \"d59ee837-5df0-4111-a4a3-53976e899aed\",\n    \"Name\": \"\",\n    \"Description\": \"\",\n    \"DeviceGoals\": [],\n    \"BusinessGoals\": [],\n    \"BusinessImpact\": []\n  },\n  \"sysContext\": {\n    \"ID\": \"b4322c58-70c7-4434-b91c-eed9f5eed582\",\n    \"Name\": \"\",\n    \"Description\": \"\",\n    \"contextDiagramID\": \"d96c3d2f-5aaf-44d5-8247-4e0327f5e08e\",\n    \"useCaseDiagramID\": \"e5ef60ae-6560-49be-812d-b46af803f1f8\"\n  },\n  \"assetGroups\": [],\n  \"myData\": [],\n  \"threatSources\": {\n    \"ID\": \"bae6b6b4-bf08-4fb1-b0ae-09cd91560269\",\n    \"Name\": \"\",\n    \"Description\": \"\",\n    \"Sources\": []\n  },\n  \"deviceThreats\": [],\n  \"contextElements\": [\n    {\n      \"ID\": \"aaf2b5ae-f1ec-4a9f-be59-af71073c5d8b\",\n      \"Name\": \"System Context Diagram\",\n      \"Description\": \"\",\n      \"UserCheckedElement\": false,\n      \"Type\": 0,\n      \"childrenIDs\": []\n    },\n    {\n      \"ID\": \"a738c122-437d-442d-98dc-e5b184ebb00f\",\n      \"Name\": \"Use Case Diagram\",\n      \"Description\": \"\",\n      \"UserCheckedElement\": false,\n      \"Type\": 0,\n      \"childrenIDs\": []\n    }\n  ],\n  \"dfdElements\": [\n    {\n      \"ID\": \"f852a2ba-3b4f-477a-bf05-357c77498c98\",\n      \"Name\": \"Data Flow Diagram1\",\n      \"Description\": \"\",\n      \"UserCheckedElement\": false,\n      \"typeID\": \"02b4631b-a8fd-47f6-b264-cb5fcedd2b1a\",\n      \"IsPhyiscal\": false,\n      \"childrenIDs\": [],\n      \"ElementTypeID\": 0\n    }\n  ],\n  \"diagrams\": [\n    {\n      \"ID\": \"d96c3d2f-5aaf-44d5-8247-4e0327f5e08e\",\n      \"Name\": \"System Context\",\n      \"Description\": \"\",\n      \"elementsID\": \"aaf2b5ae-f1ec-4a9f-be59-af71073c5d8b\",\n      \"DiagramType\": \"CTX\"\n    },\n    {\n      \"ID\": \"e5ef60ae-6560-49be-812d-b46af803f1f8\",\n      \"Name\": \"Use Cases\",\n      \"Description\": \"\",\n      \"elementsID\": \"a738c122-437d-442d-98dc-e5b184ebb00f\",\n      \"DiagramType\": \"UC\"\n    },\n    {\n      \"ID\": \"c011ec5f-9ce2-458b-862b-61021b6fc2c8\",\n      \"Name\": \"Data Flow Diagram1\",\n      \"Description\": \"\",\n      \"elementsID\": \"f852a2ba-3b4f-477a-bf05-357c77498c98\",\n      \"DiagramType\": \"DF\"\n    }\n  ],\n  \"stacks\": [],\n  \"components\": [],\n  \"threatMappings\": [],\n  \"mitigationMappings\": [],\n  \"mitigationProcesses\": [],\n  \"checklists\": [],\n  \"config\": {\n    \"Data\": {\n      \"ID\": \"17fc30a3-6c25-4f0e-8cd3-94b26172423b\",\n      \"Name\": \"Default Configuration\",\n      \"Description\": \"\",\n      \"Version\": 1,\n      \"threatLibraryID\": \"e17870ae-2c37-435c-a284-8df90ff7a5f0\",\n      \"DFDthreatRuleGroupsID\": \"1d995fc2-d7a5-4f46-ae16-954b8603b7fe\",\n      \"assetGroupID\": \"58e45260-36fa-43d7-ac37-198dcce12952\",\n      \"mitigationLibraryID\": \"6dd5db7a-e54f-4e6f-858a-33449024cf88\",\n      \"stencilThreatRuleGroupsID\": \"dc027a7a-9824-4b6a-befb-cc68270f2ecb\",\n      \"componentThreatRuleGroupsID\": \"b02f311c-0bb2-4057-9dde-6225ebbf4e1b\"\n    },\n    \"assetGroups\": [\n      {\n        \"ID\": \"58e45260-36fa-43d7-ac37-198dcce12952\",\n        \"Name\": \"Asset Groups\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [\n          \"cb2b51c2-63a8-4f7a-bf0b-a6ec8b248b78\",\n          \"148b81d8-2c0a-454d-a95c-d993e67c7266\",\n          \"fd5d32e6-212c-4b26-a129-d1a87d014c1d\",\n          \"9e0b09ae-246e-4000-b17d-ff71b142e881\"\n        ],\n        \"assetIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"9e0b09ae-246e-4000-b17d-ff71b142e881\",\n        \"Name\": \"Manufacturer Assets\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [\n          \"90d512d4-583d-47d1-a174-55d7441b7495\"\n        ],\n        \"assetIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"fd5d32e6-212c-4b26-a129-d1a87d014c1d\",\n        \"Name\": \"Owner Assets\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [\n          \"15dcf410-df02-4824-83e6-ef80b63a6da9\",\n          \"cb8c3cec-c2ec-444a-a148-9dec9825e92e\"\n        ],\n        \"assetIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"90d512d4-583d-47d1-a174-55d7441b7495\",\n        \"Name\": \"Intellectual Property (IP)\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [\n          \"e0abf169-5402-4fa6-bd56-49e6f154a6d6\",\n          \"354b8f5d-756b-400b-80cb-100182918021\",\n          \"1f2a21a0-c358-4140-861f-c795453f6322\"\n        ],\n        \"assetIDs\": [\n          \"5eb076d6-7bb3-42bc-8727-d1c1b5933afc\",\n          \"ae6eb58b-6f72-470c-8ea3-ff7af01a201a\",\n          \"7fcf997f-5c00-4a8b-9ade-3e8325ad391e\"\n        ],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"148b81d8-2c0a-454d-a95c-d993e67c7266\",\n        \"Name\": \"User Assets\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [\n          \"3ba3acb5-8e8c-49cf-b9d9-86df13c39dd6\",\n          \"2d6f3914-6d2a-46ff-9699-56ec9f0f0034\"\n        ],\n        \"assetIDs\": [\n          \"a0a5e6ff-950a-4da6-a757-ef134f1548b0\",\n          \"d0ed6d37-a544-43d1-b94d-4924cabbf26a\"\n        ],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"cb2b51c2-63a8-4f7a-bf0b-a6ec8b248b78\",\n        \"Name\": \"Common Assets\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [\n          \"abc10bed-01eb-4e3d-8743-f3a48b710844\",\n          \"95809a78-46fd-48a4-a840-d3271b11d71d\"\n        ],\n        \"assetIDs\": [\n          \"346e2669-f5a1-4790-9033-e6937d5448a2\"\n        ],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"15dcf410-df02-4824-83e6-ef80b63a6da9\",\n        \"Name\": \"Physical Property\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [\n          \"9293377e-1a41-40fa-8bd7-e603c7b73fc2\",\n          \"e946820d-0adc-4b9a-a1b1-d7f361c7d82a\"\n        ],\n        \"assetIDs\": [\n          \"fdd56e01-0633-4797-accc-b5c0207d6ebb\",\n          \"077e1f6d-094a-44d6-a8a1-1ac3978f00eb\"\n        ],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"cb8c3cec-c2ec-444a-a148-9dec9825e92e\",\n        \"Name\": \"Virtual Property\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [\n          \"f4a97cef-26dd-48c1-8cce-68d2cf6fab1d\",\n          \"51e182b7-5608-4f8c-9281-3e15725d1837\"\n        ],\n        \"assetIDs\": [\n          \"f15e8bbe-77a8-4b91-bcda-92f4e1c2ed5d\",\n          \"c3910e35-3353-490f-9fc2-da60660e444c\"\n        ],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"95809a78-46fd-48a4-a840-d3271b11d71d\",\n        \"Name\": \"Functionality & Safety\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [\n          \"5e07e85d-cdb4-4c3f-8294-eba6d865eab6\",\n          \"76f4759e-f5d8-4b34-a142-969fbe754562\"\n        ],\n        \"assetIDs\": [\n          \"4aa77061-1e91-430e-a662-6466f3926678\",\n          \"7f62763b-8816-4569-8455-b96788d9e479\"\n        ],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"5e07e85d-cdb4-4c3f-8294-eba6d865eab6\",\n        \"Name\": \"Logical Operations\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"76f4759e-f5d8-4b34-a142-969fbe754562\",\n        \"Name\": \"Physical Operations\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"3ba3acb5-8e8c-49cf-b9d9-86df13c39dd6\",\n        \"Name\": \"Collected Data\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"2d6f3914-6d2a-46ff-9699-56ec9f0f0034\",\n        \"Name\": \"Health\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"e0abf169-5402-4fa6-bd56-49e6f154a6d6\",\n        \"Name\": \"Hardware IP\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"354b8f5d-756b-400b-80cb-100182918021\",\n        \"Name\": \"Software IP\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"1f2a21a0-c358-4140-861f-c795453f6322\",\n        \"Name\": \"Process IP\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"9293377e-1a41-40fa-8bd7-e603c7b73fc2\",\n        \"Name\": \"Device\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"e946820d-0adc-4b9a-a1b1-d7f361c7d82a\",\n        \"Name\": \"Environment\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"f4a97cef-26dd-48c1-8cce-68d2cf6fab1d\",\n        \"Name\": \"Configuration\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"51e182b7-5608-4f8c-9281-3e15725d1837\",\n        \"Name\": \"Generated Data\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [],\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"abc10bed-01eb-4e3d-8743-f3a48b710844\",\n        \"Name\": \"Authentication Data\",\n        \"Description\": \"\",\n        \"assetGroupIDs\": [],\n        \"associatedDataIDs\": [\n          \"fc7ba5bf-ccba-4556-86cb-62f37ec737a2\"\n        ],\n        \"IsActive\": true\n      }\n    ],\n    \"myData\": [\n      {\n        \"ID\": \"fc7ba5bf-ccba-4556-86cb-62f37ec737a2\",\n        \"Name\": \"Device Certificate\",\n        \"Description\": \"\",\n        \"Sensitivity\": 3\n      }\n    ],\n    \"stencilTypes\": [\n      {\n        \"Name\": \"Process\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 11,\n        \"IsDefault\": true,\n        \"ID\": \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\",\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Processed Data\",\n            \"ID\": \"ProcessedData\",\n            \"Tooltip\": \"Data that the element processes, stores, produces, or receives\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Data Select\",\n            \"DefaultValue\": []\n          },\n          {\n            \"DisplayName\": \"Data Sensitivity\",\n            \"ID\": \"ProcessedDataSensitivity\",\n            \"Tooltip\": \"Sensitivity of the processed data\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Low Medium High Select\",\n            \"DefaultValue\": 2\n          }\n        ]\n      },\n      {\n        \"Name\": \"Processor\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 12,\n        \"IsDefault\": true,\n        \"ID\": \"e8430761-3c2e-4db0-adbd-5310214574c2\",\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Processed Data\",\n            \"ID\": \"ProcessedData\",\n            \"Tooltip\": \"Data that the element processes, stores, produces, or receives\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Data Select\",\n            \"DefaultValue\": []\n          },\n          {\n            \"DisplayName\": \"Data Sensitivity\",\n            \"ID\": \"ProcessedDataSensitivity\",\n            \"Tooltip\": \"Sensitivity of the processed data\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Low Medium High Select\",\n            \"DefaultValue\": 2\n          }\n        ]\n      },\n      {\n        \"Name\": \"Data Store\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 21,\n        \"IsDefault\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Processed Data\",\n            \"ID\": \"ProcessedData\",\n            \"Tooltip\": \"Data that the element processes, stores, produces, or receives\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Data Select\",\n            \"DefaultValue\": []\n          },\n          {\n            \"DisplayName\": \"Data Sensitivity\",\n            \"ID\": \"ProcessedDataSensitivity\",\n            \"Tooltip\": \"Sensitivity of the processed data\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Low Medium High Select\",\n            \"DefaultValue\": 2\n          },\n          {\n            \"DisplayName\": \"Contains Logs\",\n            \"ID\": \"ContainsLogs\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Contains Sensitive Data\",\n            \"ID\": \"ContainsSensitiveData\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          },\n          {\n            \"DisplayName\": \"Contains User Data\",\n            \"ID\": \"ContainsUserData\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ],\n        \"ID\": \"c7598413-4382-43e9-9904-fd9d877eb7a9\"\n      },\n      {\n        \"Name\": \"Phy Data Store\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 22,\n        \"IsDefault\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Processed Data\",\n            \"ID\": \"ProcessedData\",\n            \"Tooltip\": \"Data that the element processes, stores, produces, or receives\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Data Select\",\n            \"DefaultValue\": []\n          },\n          {\n            \"DisplayName\": \"Data Sensitivity\",\n            \"ID\": \"ProcessedDataSensitivity\",\n            \"Tooltip\": \"Sensitivity of the processed data\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Low Medium High Select\",\n            \"DefaultValue\": 2\n          },\n          {\n            \"DisplayName\": \"Is Encrypted\",\n            \"ID\": \"IsEncrypted\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Checks Integrity\",\n            \"ID\": \"c31746fb-c296-4eda-b7a5-8227640e9c80\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Allows Boot\",\n            \"ID\": \"43deca38-18ab-4c2b-98f0-52f0b1bfefac\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Is Internal\",\n            \"ID\": \"IsInternal\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Is Volatile\",\n            \"ID\": \"IsVolatile\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Is Removable\",\n            \"ID\": \"IsRemovable\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Is Writable\",\n            \"ID\": \"IsWritable\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          },\n          {\n            \"DisplayName\": \"Is Multiple Writable\",\n            \"ID\": \"IsMultipleWritable\",\n            \"Editable\": false,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          }\n        ],\n        \"ID\": \"80aa0465-21e0-41bd-b521-84a346c5f54b\"\n      },\n      {\n        \"Name\": \"Ext. Entity\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 31,\n        \"IsDefault\": true,\n        \"ID\": \"02b39924-b8f2-44da-a2bc-be1bd2450f68\",\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Processed Data\",\n            \"ID\": \"ProcessedData\",\n            \"Tooltip\": \"Data that the element processes, stores, produces, or receives\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Data Select\",\n            \"DefaultValue\": []\n          },\n          {\n            \"DisplayName\": \"Data Sensitivity\",\n            \"ID\": \"ProcessedDataSensitivity\",\n            \"Tooltip\": \"Sensitivity of the processed data\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Low Medium High Select\",\n            \"DefaultValue\": 2\n          },\n          {\n            \"DisplayName\": \"Allows User Input\",\n            \"ID\": \"7632a126-216a-4463-83ef-6ce82331d9f8\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          }\n        ]\n      },\n      {\n        \"Name\": \"Phy Ext. Entity\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 32,\n        \"IsDefault\": true,\n        \"ID\": \"03e3750c-8549-4589-8269-e0121b3f26a4\",\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Processed Data\",\n            \"ID\": \"ProcessedData\",\n            \"Tooltip\": \"Data that the element processes, stores, produces, or receives\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Data Select\",\n            \"DefaultValue\": []\n          },\n          {\n            \"DisplayName\": \"Data Sensitivity\",\n            \"ID\": \"ProcessedDataSensitivity\",\n            \"Tooltip\": \"Sensitivity of the processed data\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Low Medium High Select\",\n            \"DefaultValue\": 2\n          },\n          {\n            \"DisplayName\": \"Allows User Input\",\n            \"ID\": \"18571d26-3d51-45b8-96f0-ff6e273e70c6\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          }\n        ]\n      },\n      {\n        \"Name\": \"Data Flow\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 41,\n        \"IsDefault\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Overwrite Data\",\n            \"ID\": \"OverwriteDataProperties\",\n            \"Tooltip\": \"By default, processed data and data sensitivity are referenced from sender. Overwrite to set them manually\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Processed Data\",\n            \"ID\": \"ProcessedData\",\n            \"Tooltip\": \"Data that the element processes, stores, produces, or receives\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Data Select\",\n            \"DefaultValue\": []\n          },\n          {\n            \"DisplayName\": \"Data Sensitivity\",\n            \"ID\": \"ProcessedDataSensitivity\",\n            \"Tooltip\": \"Sensitivity of the processed data\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Low Medium High Select\",\n            \"DefaultValue\": 2\n          },\n          {\n            \"DisplayName\": \"Protocol Stack\",\n            \"ID\": \"ProtocolStack\",\n            \"Tooltip\": \"List of protocols used within the communication\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Protocol Select\",\n            \"DefaultValue\": []\n          },\n          {\n            \"DisplayName\": \"Overwrite Stack\",\n            \"ID\": \"OverwriteProtocolProperties\",\n            \"Tooltip\": \"Use either the properties derived from the protocols or define them manually\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ],\n        \"ID\": \"b395ada9-bc1d-4df9-b9f3-a1b09ee2a5aa\"\n      },\n      {\n        \"Name\": \"Trust Area\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 71,\n        \"IsDefault\": true,\n        \"ID\": \"8f95badd-15c2-4bd6-9146-67b34f24c724\",\n        \"Properties\": []\n      },\n      {\n        \"Name\": \"Phy Trust Area\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 72,\n        \"IsDefault\": true,\n        \"ID\": \"edd93ea1-6122-492c-bbef-332ecf0113b3\",\n        \"Properties\": []\n      },\n      {\n        \"Name\": \"Physical Link\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 51,\n        \"IsDefault\": true,\n        \"ID\": \"04be7cf6-00dd-4aa8-b90b-e9bf105e39e7\",\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Processed Data\",\n            \"ID\": \"ProcessedData\",\n            \"Tooltip\": \"Data that the element processes, stores, produces, or receives\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Data Select\",\n            \"DefaultValue\": []\n          },\n          {\n            \"DisplayName\": \"Data Sensitivity\",\n            \"ID\": \"ProcessedDataSensitivity\",\n            \"Tooltip\": \"Sensitivity of the processed data\",\n            \"Editable\": true,\n            \"HasGetter\": true,\n            \"Type\": \"Low Medium High Select\",\n            \"DefaultValue\": 2\n          },\n          {\n            \"DisplayName\": \"Is Sensor\",\n            \"ID\": \"NewProperty1\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          },\n          {\n            \"DisplayName\": \"Is Actuator\",\n            \"ID\": \"NewProperty3\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ]\n      },\n      {\n        \"Name\": \"Interface\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 61,\n        \"IsDefault\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Is Wireless\",\n            \"ID\": \"IsWireless\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Enables Access To Critical Function\",\n            \"ID\": \"db9caa64-fec1-47e8-9ed8-97896030cc90\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          },\n          {\n            \"DisplayName\": \"Requires Authentication\",\n            \"ID\": \"a5bb6218-f4e3-445f-95b3-1fc0be602d36\",\n            \"Tooltip\": \"Authentication is always required before performing any functionality\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ],\n        \"ID\": \"4e797b3d-fcdd-43ce-953e-8d5af2c47d91\"\n      },\n      {\n        \"Name\": \"DFD Container\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 0,\n        \"IsDefault\": true,\n        \"ID\": \"02b4631b-a8fd-47f6-b264-cb5fcedd2b1a\",\n        \"Properties\": []\n      },\n      {\n        \"ID\": \"967a0727-3f2f-4fa8-a549-f9b7bd4efbc5\",\n        \"Name\": \"Subprocess\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Subprocess Diagram\",\n            \"ID\": \"SubprocessDiagram\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Diagram Reference\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Go To Subprocess\",\n            \"ID\": \"SubprocessDiagram\",\n            \"HasGetter\": false,\n            \"Tooltip\": \"\",\n            \"Editable\": false,\n            \"Type\": \"Diagram Reference\"\n          }\n        ],\n        \"ElementTypeID\": 11\n      },\n      {\n        \"Name\": \"Microprocessor\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 12,\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Has Trusted Execution Environment\",\n            \"ID\": \"HasTrustedExecutionEnvironment\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Has Root of Trust\",\n            \"ID\": \"HasRootofTrust\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ],\n        \"ID\": \"8bd42f0c-a4d2-4d98-9dcb-b9b100114fa5\"\n      },\n      {\n        \"Name\": \"ASIC\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 12,\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Is Custom Design\",\n            \"ID\": \"IsCustomDesign\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          },\n          {\n            \"DisplayName\": \"Is In-House Produced\",\n            \"ID\": \"IsIn-HouseProduced\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ],\n        \"ID\": \"6065e8dd-23c0-4dc9-ad51-628af88f3309\"\n      },\n      {\n        \"Name\": \"Crypto Processor\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 12,\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Has True RNG\",\n            \"ID\": \"HasTrueRNG\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true,\n            \"Tooltip\": \"Has True Random Number Generator (RNG)\"\n          },\n          {\n            \"DisplayName\": \"Has PUF\",\n            \"ID\": \"HasPUF\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ],\n        \"ID\": \"7b968a35-bdd2-4dec-b54b-6fca0bc93058\"\n      },\n      {\n        \"ElementTypeID\": 21,\n        \"Name\": \"File\",\n        \"Description\": \"\",\n        \"PropertyOverwrites\": [],\n        \"ID\": \"9ebca319-a256-406b-b548-28a4b44f15b1\",\n        \"IsDefault\": false,\n        \"Properties\": []\n      },\n      {\n        \"Name\": \"Config File\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 21,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"PropertyOverwrites\": [],\n        \"ID\": \"9ebe3a8f-eedb-40cd-9cbf-d1012a1829e2\"\n      },\n      {\n        \"Name\": \"User Database\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 21,\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Password Is Hashed\",\n            \"ID\": \"ea6098a1-cc93-4f7d-a6c6-e9ec84e8c393\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Password Is Salted\",\n            \"ID\": \"452b2b74-1eb6-4edb-8921-274b2332c7bf\",\n            \"Tooltip\": \"Password hash is calculated of the joining of password and salt\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ],\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"ContainsUserData\",\n            \"Value\": true\n          }\n        ],\n        \"ID\": \"367702af-ceba-459b-84e5-27efe918968e\"\n      },\n      {\n        \"Name\": \"Log File\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 21,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"ContainsLogs\",\n            \"Value\": true\n          }\n        ],\n        \"ID\": \"a74ba004-2165-4721-9b9b-2ce4b9df88c2\"\n      },\n      {\n        \"Name\": \"SRAM\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 22,\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Clears Content on State Transition\",\n            \"ID\": \"NewProperty1\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ],\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"IsVolatile\",\n            \"Value\": true\n          }\n        ],\n        \"ID\": \"69401648-0084-45ca-b984-505173c9cdb1\"\n      },\n      {\n        \"Name\": \"FLASH\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 22,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ID\": \"4409e854-5f53-4e7e-bee5-232c0e27fb40\"\n      },\n      {\n        \"Name\": \"OTP\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 22,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"IsMultipleWritable\",\n            \"Value\": false\n          }\n        ],\n        \"ID\": \"44d3f1c3-d8cb-4fd8-bccf-1fe409b36992\"\n      },\n      {\n        \"Name\": \"SD Card\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 22,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"IsRemovable\",\n            \"Value\": true\n          }\n        ],\n        \"ID\": \"1959aadb-553f-491d-9e5c-665245093d95\"\n      },\n      {\n        \"Name\": \"USB Flash Drive\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 22,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"IsRemovable\",\n            \"Value\": true\n          }\n        ],\n        \"ID\": \"565e2ea5-b296-44b0-a5ca-8b4a06cfcc06\"\n      },\n      {\n        \"ElementTypeID\": 31,\n        \"Name\": \"Browser\",\n        \"Description\": \"\",\n        \"ID\": \"049bfa6e-d0b9-4f8d-9920-dfaa78523c85\",\n        \"IsDefault\": false,\n        \"Properties\": []\n      },\n      {\n        \"ElementTypeID\": 41,\n        \"Name\": \"HTTPS\",\n        \"Description\": \"\",\n        \"ID\": \"4ae2efbd-9c4e-4885-bdaa-ba9f34ed5c9b\",\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"ProtocolStack\",\n            \"Value\": [\n              \"21731335-5e66-455c-9b6a-6796ac85577a\"\n            ]\n          }\n        ]\n      },\n      {\n        \"ElementTypeID\": 51,\n        \"Name\": \"Sensor\",\n        \"Description\": \"\",\n        \"ID\": \"dffbfc0a-850b-4de0-95fb-ab9ea4273d88\",\n        \"IsDefault\": false,\n        \"Properties\": []\n      },\n      {\n        \"Name\": \"JTAG\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 61,\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Disabled after Production\",\n            \"ID\": \"e8430761-3c2e-4db0-adbd-5310214574c2\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ],\n        \"ID\": \"cf7355d0-6f0c-4ad8-afa2-8689a81e28b8\"\n      },\n      {\n        \"Name\": \"CAN\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 61,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ID\": \"f9209f6d-3f5b-4e72-8c03-75531058d0f2\"\n      },\n      {\n        \"Name\": \"SPI\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 61,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ID\": \"c4967596-a83f-4530-84a6-afe75fec1a7b\"\n      },\n      {\n        \"Name\": \"USB\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 61,\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Supports HID Class\",\n            \"ID\": \"23564ce2-4786-4144-85b6-d03de2771d6b\",\n            \"Tooltip\": \"Supports HID (Human Interface Device) class, which is, for example, used for keyboard and mouse\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          },\n          {\n            \"DisplayName\": \"Supports Mass Storage Class\",\n            \"ID\": \"e884ecfe-bda1-4f0b-86f7-3ce0d735aeeb\",\n            \"Tooltip\": \"Supports mass storage class, which is, for example, used for storing files\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          }\n        ],\n        \"ID\": \"111a5819-f53f-4a8d-81df-6b756a20efe7\"\n      },\n      {\n        \"Name\": \"Ethernet\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 61,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ID\": \"58e0c62c-e5b7-4e9f-9f8a-f8150cf18930\"\n      },\n      {\n        \"ID\": \"4edf4a31-e828-4933-9a87-779083e7167e\",\n        \"Name\": \"RF Module\",\n        \"Description\": \"Proprietary protocols, e.g. protocols that use the 860 MHz band\",\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Limits Duty Cycle\",\n            \"ID\": \"229d9064-0034-4e55-998e-a50d8e0f9dd4\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ],\n        \"ElementTypeID\": 61,\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"IsWireless\",\n            \"Value\": true\n          }\n        ]\n      },\n      {\n        \"Name\": \"WiFi\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 61,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"IsWireless\",\n            \"Value\": true\n          }\n        ],\n        \"ID\": \"59f2fd67-bc38-4447-9c14-d9306283bbe9\"\n      },\n      {\n        \"Name\": \"Bluetooth\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 61,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"IsWireless\",\n            \"Value\": true\n          }\n        ],\n        \"ID\": \"2460a6c9-40e5-44c7-b133-10c6654efd18\"\n      },\n      {\n        \"Name\": \"PROFIBUS\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 61,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ID\": \"b7057a19-76b2-4cf5-9d7a-e3335079fa5f\"\n      },\n      {\n        \"Name\": \"Internet Area\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 71,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ID\": \"b76ebd30-234d-4704-bf27-ab3e0bf5ae97\"\n      },\n      {\n        \"Name\": \"Company Area\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 71,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ID\": \"4a5bbdcf-ef9a-49cb-ac4c-a05dcefd95d2\"\n      },\n      {\n        \"Name\": \"Local Area\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 71,\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ID\": \"9f80b636-e7a4-4782-b529-24235055ebe3\"\n      },\n      {\n        \"ID\": \"6b8b580e-f99a-4e0c-850d-241fccfd0079\",\n        \"Name\": \"Device Casing\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Is Mobile\",\n            \"ID\": \"e9148055-f813-45da-85a8-bfcf4d71ff40\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          }\n        ],\n        \"ElementTypeID\": 72\n      },\n      {\n        \"Name\": \"PCB\",\n        \"Description\": \"\",\n        \"ElementTypeID\": 72,\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Is Custom Design\",\n            \"ID\": \"IsCustomDesign\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          },\n          {\n            \"DisplayName\": \"Is In-House Produced\",\n            \"ID\": \"IsIn-HouseProduced\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Is Replaceable\",\n            \"ID\": \"IsReplaceable\",\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          }\n        ],\n        \"ID\": \"a051ae84-5f0a-4f8e-a468-2d309cd7223f\"\n      },\n      {\n        \"ID\": \"361cf331-bd80-413d-835a-ac900f091906\",\n        \"Name\": \"Chip/IC\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ElementTypeID\": 72\n      },\n      {\n        \"ID\": \"74245351-b923-4cd6-b9e7-fe9f9916cbf5\",\n        \"Name\": \"SQL Database\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ElementTypeID\": 21\n      },\n      {\n        \"ID\": \"6b505c9a-c505-4305-8c07-a3cde1c1ddfc\",\n        \"Name\": \"Display\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Enables Authentication\",\n            \"ID\": \"04fc735e-8da5-409d-93c9-5d56eb0a852d\",\n            \"Tooltip\": \"Users can log in to the system, usually by entering username and password.\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          }\n        ],\n        \"ElementTypeID\": 51,\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"NewProperty1\",\n            \"Value\": false\n          },\n          {\n            \"Key\": \"NewProperty3\",\n            \"Value\": true\n          }\n        ]\n      },\n      {\n        \"ID\": \"5f755466-4417-4060-83de-64bddeabd1ba\",\n        \"Name\": \"Car Battery\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ElementTypeID\": 51,\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"NewProperty3\",\n            \"Value\": true\n          }\n        ]\n      },\n      {\n        \"ID\": \"1dc32bac-147f-42a4-a13c-44e5b59f7b81\",\n        \"Name\": \"Battery Power Supply\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"ElementTypeID\": 51\n      },\n      {\n        \"ID\": \"e75f9804-6ae3-4eb6-9011-4b87a0d4823b\",\n        \"Name\": \"Wired Power Supply\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Is Pluggable \",\n            \"ID\": \"cef5bbac-5833-49bb-9021-9f5200c29c83\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          }\n        ],\n        \"ElementTypeID\": 51\n      },\n      {\n        \"ID\": \"6970555e-8c1f-466b-add7-35babed4a7fa\",\n        \"Name\": \"RFID Tag\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Has EPC\",\n            \"ID\": \"edc587ce-e8d8-4340-9e42-d90627777c62\",\n            \"Tooltip\": \"Has Electronic Product Code (EPC)\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          }\n        ],\n        \"ElementTypeID\": 51\n      },\n      {\n        \"ID\": \"c2d71a11-6228-4e05-bc93-0ddd45328fde\",\n        \"Name\": \"Camera\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Can Record Humans\",\n            \"ID\": \"38883a00-d18f-4d1f-8a4c-18741a480557\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": true\n          },\n          {\n            \"DisplayName\": \"Has Gesture Recognition\",\n            \"ID\": \"d9919a71-0642-46a5-8056-348e06f8b86e\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ],\n        \"ElementTypeID\": 51\n      }\n    ],\n    \"stencilTypeTemplates\": [\n      {\n        \"ID\": \"943f0836-0524-46a0-b495-9e5dc5c8f39e\",\n        \"Name\": \"Microcontroller\",\n        \"Description\": \"\",\n        \"stencilTypeIDs\": [\n          \"8bd42f0c-a4d2-4d98-9dcb-b9b100114fa5\",\n          \"69401648-0084-45ca-b984-505173c9cdb1\",\n          \"4409e854-5f53-4e7e-bee5-232c0e27fb40\",\n          \"cf7355d0-6f0c-4ad8-afa2-8689a81e28b8\",\n          \"361cf331-bd80-413d-835a-ac900f091906\"\n        ],\n        \"ListInHWDiagram\": true,\n        \"ListInElementTypeIDs\": [\n          12,\n          72\n        ],\n        \"Layout\": [\n          {\n            \"x\": 20,\n            \"y\": 40,\n            \"canEditSize\": false,\n            \"width\": 340,\n            \"height\": 250\n          },\n          {\n            \"x\": 180,\n            \"y\": 40,\n            \"canEditSize\": false,\n            \"width\": 0,\n            \"height\": 0\n          },\n          {\n            \"x\": 20,\n            \"y\": 135,\n            \"canEditSize\": false,\n            \"width\": 0,\n            \"height\": 0\n          },\n          {\n            \"x\": 180,\n            \"y\": 135,\n            \"canEditSize\": false,\n            \"width\": 0,\n            \"height\": 0\n          },\n          {\n            \"x\": 0,\n            \"y\": 0,\n            \"canEditSize\": true,\n            \"width\": 340,\n            \"height\": 250\n          }\n        ]\n      }\n    ],\n    \"stencilThreatMnemonics\": [\n      {\n        \"ID\": \"c262c90f-3076-43f2-8de3-0cada1f881cd\",\n        \"Name\": \"STRIDE\",\n        \"Description\": \"\",\n        \"Letters\": [\n          {\n            \"Name\": \"Spoofing\",\n            \"Letter\": \"S\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              12,\n              31,\n              32,\n              51\n            ]\n          },\n          {\n            \"Name\": \"Tampering\",\n            \"Letter\": \"T\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              12,\n              21,\n              22,\n              72,\n              41,\n              51,\n              61\n            ]\n          },\n          {\n            \"Name\": \"Repudiation\",\n            \"Letter\": \"R\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              12,\n              31,\n              32\n            ]\n          },\n          {\n            \"Name\": \"Information Disclosure\",\n            \"Letter\": \"I\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              12,\n              21,\n              22,\n              41,\n              51,\n              61\n            ]\n          },\n          {\n            \"Name\": \"Denial of Service\",\n            \"Letter\": \"D\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              12,\n              21,\n              22,\n              41,\n              51,\n              61\n            ]\n          },\n          {\n            \"Name\": \"Elevation of Privilege\",\n            \"Letter\": \"E\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              12\n            ]\n          }\n        ]\n      },\n      {\n        \"ID\": \"1e834e57-12f5-4679-8027-434d1e5812a2\",\n        \"Name\": \"LINDDUN\",\n        \"Description\": \"\",\n        \"Letters\": [\n          {\n            \"Name\": \"Linkability\",\n            \"Letter\": \"L\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              21,\n              31,\n              41,\n              51,\n              61,\n              32,\n              22,\n              12\n            ]\n          },\n          {\n            \"Name\": \"Identifiability\",\n            \"Letter\": \"I\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              21,\n              31,\n              41,\n              51,\n              61,\n              32,\n              22,\n              12\n            ]\n          },\n          {\n            \"Name\": \"Non-Repudiation\",\n            \"Letter\": \"N\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              21,\n              41,\n              51,\n              61,\n              22,\n              12\n            ]\n          },\n          {\n            \"Name\": \"Detectability\",\n            \"Letter\": \"D\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              21,\n              41,\n              51,\n              61,\n              22,\n              12\n            ]\n          },\n          {\n            \"Name\": \"Disclosure of Information\",\n            \"Letter\": \"D\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              21,\n              41,\n              51,\n              61,\n              22,\n              12\n            ]\n          },\n          {\n            \"Name\": \"Unawareness\",\n            \"Letter\": \"U\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              31,\n              32\n            ]\n          },\n          {\n            \"Name\": \"Non-Compliance\",\n            \"Letter\": \"N\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              11,\n              21,\n              41,\n              51,\n              61,\n              22,\n              12\n            ]\n          }\n        ]\n      },\n      {\n        \"ID\": \"40ae1e0b-e25a-4285-a580-3f2d68d6cb75\",\n        \"Name\": \"Safety & Privacy\",\n        \"Description\": \"\",\n        \"Letters\": [\n          {\n            \"Name\": \"Safety\",\n            \"Letter\": \"S\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              51,\n              41,\n              32\n            ]\n          },\n          {\n            \"Name\": \"Privacy\",\n            \"Letter\": \"P\",\n            \"Description\": \"\",\n            \"AffectedElementTypes\": [\n              51,\n              11,\n              21,\n              22,\n              12,\n              41\n            ]\n          }\n        ]\n      }\n    ],\n    \"protocols\": [\n      {\n        \"ID\": \"5c833fba-2a5b-4d15-bc48-f4a6e74ddc27\",\n        \"Name\": \"Protocol\",\n        \"Description\": \"\",\n        \"IsDefault\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Provides Confidentiality\",\n            \"ID\": \"ProvidesConfidentiality\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Provides Integrity\",\n            \"ID\": \"ProvidesIntegrity\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Provides Sender Authenticity\",\n            \"ID\": \"ProvidesSenderAuthenticity\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          },\n          {\n            \"DisplayName\": \"Provides Receiver Authenticity\",\n            \"ID\": \"ProvidesReceiverAuthenticity\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\",\n            \"DefaultValue\": false\n          }\n        ]\n      },\n      {\n        \"ID\": \"21731335-5e66-455c-9b6a-6796ac85577a\",\n        \"Name\": \"HTTPS\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": [],\n        \"PropertyOverwrites\": [\n          {\n            \"Key\": \"New Property2\",\n            \"Value\": true\n          },\n          {\n            \"Key\": \"New Property1\",\n            \"Value\": true\n          },\n          {\n            \"Key\": \"ProvidesConfidentiality\",\n            \"Value\": true\n          },\n          {\n            \"Key\": \"ProvidesIntegrity\",\n            \"Value\": true\n          },\n          {\n            \"Key\": \"ProvidesReceiverAuthenticity\",\n            \"Value\": true\n          }\n        ]\n      },\n      {\n        \"ID\": \"f805dd78-eac2-4967-8dfc-231605a75ace\",\n        \"Name\": \"BLE\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": []\n      },\n      {\n        \"ID\": \"c4ce892e-975c-48f5-a0f8-e6eb7591111d\",\n        \"Name\": \"Proprietary Protocol\",\n        \"Description\": \"\",\n        \"IsDefault\": false,\n        \"Properties\": []\n      }\n    ],\n    \"myComponentSWTypes\": [\n      {\n        \"ID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n        \"Name\": \"Operating System\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"IsThirdParty\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Has Only Required Components\",\n            \"ID\": \"a7e3fa91-ce20-42b3-8e35-e0188ca1ac50\",\n            \"Tooltip\": \"Does the operating system only include components (libraries, modules, packages, ...) that are required to support the function of the device?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Is Latest OS Version\",\n            \"ID\": \"4ba05121-485a-40eb-832a-f4095c7b88df\",\n            \"Tooltip\": \"Is the OS the latest available stable version?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Secure Config Is Default\",\n            \"ID\": \"41b3d476-6ff9-40d7-ad5b-c5d5fad4cda1\",\n            \"Tooltip\": \"Does the device ship with the most secure configuration in place (security by default)?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Component Update Process\",\n            \"ID\": \"36ed4680-0b94-42a9-9863-08eb976c9ebc\",\n            \"Tooltip\": \"Is there a process to update OS components to the latest stable version throughout the lifetime of a deployed device?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Activated Ports\",\n            \"ID\": \"fb3b36de-11b3-4e5d-9c9c-4dcfab666da6\",\n            \"Tooltip\": \"Are all ports, protocols, and services that are not used deactivated?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Root Access Restricted\",\n            \"ID\": \"c93fbf95-01d7-45fb-a786-0eb926e6dc2c\",\n            \"Tooltip\": \"Is the access to the root file system restricted for users/applications?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Follows Least Privilege Principal\",\n            \"ID\": \"7378780b-e280-4494-84f2-0beb4e7257ec\",\n            \"Tooltip\": \"Have all files and directories the minimum required access rights (least privilege principal)?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"File System Is Encrypted \",\n            \"ID\": \"85e19877-51a0-4904-8e98-b2fb14be3922\",\n            \"Tooltip\": \"Is the file system encrypted?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n        \"Name\": \"Secure Boot\",\n        \"Description\": \"See section C and M of https://www.iotsecurityfoundation.org/wp-content/uploads/2019/12/Best-Practice-Guides-Release-2_Digitalv3.pdf\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Has Boot Code Protection in RAM\",\n            \"ID\": \"885834f4-b8b6-485b-8690-6ac525dbb59d\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Secure Boot\",\n            \"ID\": \"4f0c5fb9-e24f-487a-b192-66d10c2b97a5\",\n            \"Tooltip\": \"Does the device implement a secure boot?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Root Of Trust\",\n            \"ID\": \"17b59f51-59d3-4a8f-9960-a04ce7e96be6\",\n            \"Tooltip\": \"Does the device has a immutable Root Of Trust in hardware?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Checks Immediately Before Execution\",\n            \"ID\": \"f3697413-e4de-4572-90b1-8041e8ff9b67\",\n            \"Tooltip\": \"Is code checked for validity and trust immediately before running the code (to reduce Time of Check to Time of Use attacks)?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Proper Boot Order\",\n            \"ID\": \"eb678bc0-3ece-4937-bba3-03981c5759a4\",\n            \"Tooltip\": \"Does the device boot the next stage only after the successful boot of the previous stage? \",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n        \"Name\": \"Firmware Update\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Is Updatable\",\n            \"ID\": \"367b80cd-1b41-483b-a157-b143714b8af7\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Prevents Roll-Back\",\n            \"ID\": \"d951b792-f84b-4ab3-82d1-21867e202755\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Is Validating Integrity\",\n            \"ID\": \"8f47a4ac-0934-4a65-a6f3-07503c92f658\",\n            \"Tooltip\": \"Does the update routine cryptographically validate the integrity of a software update package before the installation begins?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Is Validating Authenticity\",\n            \"ID\": \"00f961fc-97ce-4003-8f2e-79a4748ec0b2\",\n            \"Tooltip\": \"Does the update routine cryptographically validate the authenticity of a software update package before the installation begins?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Allows TOCTOU attack\",\n            \"ID\": \"000441ff-d15f-46c3-bb9c-0c949063271d\",\n            \"Tooltip\": \"Does the system ensure that the package cannot be modified or replaced by an attacker between being validated and installed - a TOCTOU (Time of Check to Time of Use) attack?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Fail Safe Mechanism\",\n            \"ID\": \"3df6a845-52a2-40a9-8978-0277efd7cfcb\",\n            \"Tooltip\": \"Does the system implement a fail safe mechanism that will leave the system in a known safe state in the event of a failed update?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Is Encrypted\",\n            \"ID\": \"434d79b2-574c-4575-813b-19ec7854a139\",\n            \"Tooltip\": \"Is the firmware update encrypted?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n        \"Name\": \"Cryptography\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"IsThirdParty\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Uses Risky Cryptographic Algorithm \",\n            \"ID\": \"783c742d-ebbf-4a58-b8c9-bdc0faeff57d\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Allows Downgrade\",\n            \"ID\": \"56a10ad5-a9bf-426f-8e83-ba07561ca78b\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Weak Block Cipher Mode\",\n            \"ID\": \"518bbb50-aeee-4c87-95d1-8724a4dac569\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Appropriate Parameters\",\n            \"ID\": \"08377961-8f56-4b56-b684-331f77810f1d\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Sufficient Entropy\",\n            \"ID\": \"420f03a2-1ab7-4bc2-910d-4ea025518da2\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Reuses Nonces\",\n            \"ID\": \"f35ccff8-6497-4b28-8627-7f255bce0e02\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n        \"Name\": \"Authentication\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Has Hard-Coded Credentials\",\n            \"ID\": \"e1e92ae3-ee61-4cae-bfb5-be18e97ea587\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Default Credentials\",\n            \"ID\": \"714ed1de-855c-491b-8a08-745a99e17413\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Password Requirements\",\n            \"ID\": \"540e39da-3227-4e6c-86ea-32a017318511\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Is Multi-Factor Authentication\",\n            \"ID\": \"88763e20-7878-4525-81d8-c4d09b867042\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Restriction of Attempts\",\n            \"ID\": \"aa74f499-b995-4f5e-8d92-91f3ca172743\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Session ID Expiration\",\n            \"ID\": \"51473250-3891-4342-a8b8-687db16ffef3\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Session Timeout\",\n            \"ID\": \"a21a6894-256f-4bfd-bd49-09352d054399\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Strong Password Recovery\",\n            \"ID\": \"a9b6390d-0145-4e0f-8420-8a9b8f728c3d\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Is Client-side Hashing\",\n            \"ID\": \"ba8dc5f0-e1a9-4263-8179-747791b873ee\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Exposes Sensitive Information\",\n            \"ID\": \"157fd588-2ea2-4260-9a25-86bf8241b31c\",\n            \"Tooltip\": \"Does an authentication response contain information which requirement is not fulfilled (e.g. password/username is wrong)? \",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"9926788f-c85e-43ca-91e4-aa9c0f46656e\",\n        \"Name\": \"Error Handling\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Handles All Exceptions\",\n            \"ID\": \"897ef1fd-f1e7-4527-89e3-2cdaf2c8644a\",\n            \"Tooltip\": \"Can unhandled exceptions occur?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Exposes Sensitive Info\",\n            \"ID\": \"f7733c50-2529-459f-9397-8d06f231121c\",\n            \"Tooltip\": \"Do error messages reveal details about the internal state (e.g. stack information, path, passwords)?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"44545d3e-fa0a-44c7-a19e-8164dab646dc\",\n        \"Name\": \"Device Management\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Device Has Tamper Resistant Unique ID\",\n            \"ID\": \"08ee42e8-3525-4767-98e3-f7492f356d2f\",\n            \"Tooltip\": \"Is the device uniquely identifiable (the ID is factory-set and tamper resistant stored in hardware)?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"7e64d98b-ecbe-4921-9545-8b30d0f9bde8\",\n        \"Name\": \"User Management\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Has Unique User IDs\",\n            \"ID\": \"6391f8f2-eb04-4caf-b490-49c920315867\",\n            \"Tooltip\": \"Are users identified by a unique identifier? \",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Enables Different Privileges\",\n            \"ID\": \"cdb65d33-946e-412e-838b-3075e928c4f0\",\n            \"Tooltip\": \"Is it possible to assign different privileges to users?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Stores Passwords Properly\",\n            \"ID\": \"984400a6-7bd6-4031-a40c-06f0499e0d86\",\n            \"Tooltip\": \"Are passwords stored properly (using a cryptographic hash function along with a unique unpredictable salt)?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Removes User Data on Reset\",\n            \"ID\": \"e6ee6f25-6e52-4f43-93c4-7ef35eb97024\",\n            \"Tooltip\": \"Does a factory reset remove all user data/credentials stored on the device?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Name\": \"Logging\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Complies to Data Protection Regulations\",\n            \"ID\": \"4006de15-8767-4a09-8678-84b8d6b50ae0\",\n            \"Tooltip\": \"Do all logged data comply with prevailing data protection regulations?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Restricts Access\",\n            \"ID\": \"8e4b2af8-b023-4991-80f5-54ffa28cd616\",\n            \"Tooltip\": \"Is access to log files restricted to the minimum required rights to function properly?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Implements Log Rotation\",\n            \"ID\": \"d0532ce9-51a9-4bb1-84ae-c8c63ee78e7f\",\n            \"Tooltip\": \"Is there a maximum size for logs and is log rotating implemented?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Evaluates Logs\",\n            \"ID\": \"364003cb-3e6c-470a-a6bf-e7a7c93e07fa\",\n            \"Tooltip\": \"Are logs regularly monitored and analyzed to extract valuable information and insight?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Stores Logs Separately\",\n            \"ID\": \"418fe90d-88fd-4066-9339-890501ea07f0\",\n            \"Tooltip\": \"Are logs stored in their own partition, separate from other system files?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Central Log Backup\",\n            \"ID\": \"bd32d10e-82d6-4e7f-9247-fe2753908e60\",\n            \"Tooltip\": \"Does the device securely send logs to a central repository? \",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Logs Passwords\",\n            \"ID\": \"025e828e-d1a0-4487-9c56-09fd6941d4b9\",\n            \"Tooltip\": \"Does the device log passwords?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Logs Authentication Attempts\",\n            \"ID\": \"c7d5fd7a-4007-480c-a34b-cb32fab17472\",\n            \"Tooltip\": \"Are authentication attempts logged?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Logs Changes in User Session\",\n            \"ID\": \"a154298a-d410-4da4-921d-906165cd5329\",\n            \"Tooltip\": \"Are user login, logout, and inactivity logged?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Logs Firmware Changes\",\n            \"ID\": \"91abf825-cfca-4386-b5d5-8262423b090d\",\n            \"Tooltip\": \"Are changes to the firmware logged?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Logs User Management Changes\",\n            \"ID\": \"1a582358-45c2-42e2-a21e-61206a4eda7e\",\n            \"Tooltip\": \"Are user management changes logged?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Logs Privilege Change\",\n            \"ID\": \"c86b6500-99cb-46e3-948f-b67b69c9768d\",\n            \"Tooltip\": \"Are privilege changes logged?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Logs Configuration Changes\",\n            \"ID\": \"0bd863c2-5505-4226-9b28-bab9715c99d1\",\n            \"Tooltip\": \"Are configuration changes logged?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"dda38dcf-c681-4aa7-831a-7d0943ffbdcf\",\n        \"Name\": \"TCP/IP\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"Properties\": []\n      },\n      {\n        \"ID\": \"693eb3c8-9d8a-42ce-91aa-0ac4c190d7dc\",\n        \"Name\": \"MQTT Client\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsThirdParty\": true,\n        \"Properties\": []\n      },\n      {\n        \"ID\": \"c80fa1ff-def0-49b3-ad47-0c9f56c21fe6\",\n        \"Name\": \"OPC UA\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsThirdParty\": true,\n        \"Properties\": []\n      },\n      {\n        \"ID\": \"fe464818-7cef-4aba-9d18-0bc2357ca56c\",\n        \"Name\": \"PROFINET\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsThirdParty\": true,\n        \"Properties\": []\n      },\n      {\n        \"ID\": \"2673ba36-ece0-462b-b115-0edb2c17828f\",\n        \"Name\": \"Modbus TCP\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsThirdParty\": true,\n        \"Properties\": []\n      },\n      {\n        \"ID\": \"ce3cdda1-0737-468e-83e7-ca20098551d1\",\n        \"Name\": \"HTTP Server\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsThirdParty\": true,\n        \"Properties\": []\n      },\n      {\n        \"ID\": \"a6659758-d5b9-47ab-961e-a77703652cf4\",\n        \"Name\": \"Mobile App API\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsThirdParty\": true,\n        \"Properties\": []\n      },\n      {\n        \"ID\": \"2ca79dc4-0a73-4fc2-859b-1b5701530183\",\n        \"Name\": \"User Application\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": false,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Follows Least Privilege Principal\",\n            \"ID\": \"03d7ff9f-bbdc-4938-974d-cd9766bdb8e0\",\n            \"Tooltip\": \"Does the application operate at the lowest privilege level that is possible, with access only to resources needed (least privilege principal)?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Is Isolated\",\n            \"ID\": \"532fc4c6-b14f-4b9a-b033-f4aaf0d63e25\",\n            \"Tooltip\": \"Is the application isolated from others, e.g. using sandboxing techniques such as virtual machines, containerisation, or hardware mechansims?  \",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Validates Input\",\n            \"ID\": \"1c1a93cf-acce-4f57-a210-e0b5058f57b8\",\n            \"Tooltip\": \"Is all data input sanitized and validated before processing?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"bc2d8f91-7339-4153-bc54-596985edc9c5\",\n        \"Name\": \"Monitoring API\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsThirdParty\": true,\n        \"Properties\": []\n      },\n      {\n        \"ID\": \"2d746c06-a57d-41af-9712-f9d8059425eb\",\n        \"Name\": \"Debugging\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Has Improper Access Control\",\n            \"ID\": \"f40ce61a-c823-4ca7-ab51-a70dbd9718a6\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Exposes Internal Assets\",\n            \"ID\": \"517b62dd-eea7-426e-82c6-2c458eed0aaf\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Unpublished Interface\",\n            \"ID\": \"311904f3-7898-4bab-ba74-e6024c704cd3\",\n            \"Tooltip\": \"Are the hidden interfaces that developers created with the intend to be not publicly available?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"6c83ccbc-ffbd-4bd6-b207-07386e3393c5\",\n        \"Name\": \"Hardware Abstraction\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Has Hardware Feature Restriction\",\n            \"ID\": \"4d88ce07-2a06-4ae3-942a-46eb25ccdd9b\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"ea189855-6883-489f-a3d0-77d4ac51a6ef\",\n        \"Name\": \"Memory Management\",\n        \"Description\": \"\",\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Allows Address Region Overlap\",\n            \"ID\": \"ca6a9224-153b-4c06-8c1b-4ea3333c8e92\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Clears Data on State Transition\",\n            \"ID\": \"16ab50f4-dd94-43dd-8480-37cae5c61043\",\n            \"Tooltip\": \"\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n        \"Name\": \"Key Management\",\n        \"Description\": \"https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html#key-management-lifecycle-best-practices\",\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Stores Keys in Security Module \",\n            \"ID\": \"64bb2754-a187-47c8-aa93-e599f0a97a57\",\n            \"Tooltip\": \"Are keys stored in a cryptographic vault, such as a trusted platform module (TPM), secure element (SE), or hardware security module (HSM)? \",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Key Used In Trusted Environment\",\n            \"ID\": \"b43ada71-51c6-4f5e-b310-a1735a41e602\",\n            \"Tooltip\": \"Are cryptographic operations (such as key access, encryption, and signing) executed in a trusted environment (e.g. separate module)?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Encrypts Keys\",\n            \"ID\": \"b6c0efb3-7db3-4dd8-8c60-620027eefa3e\",\n            \"Tooltip\": \"Are keys encrypted using a key encryption key (KEK)? \",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Verifies Certificate Chain\",\n            \"ID\": \"20b12b0e-4031-4eb3-ad39-f91489884490\",\n            \"Tooltip\": \"Is the entire certificate chain validated before trusting a certificate?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Enables Certificate Update\",\n            \"ID\": \"e09bd987-fbf4-4f3d-afeb-033e5bdcb7f8\",\n            \"Tooltip\": \"Is there a secure and reliable way to update certificates?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Enables Certificate Revocation\",\n            \"ID\": \"c9d634b6-7eb8-4210-9e97-58e93a5c09a0\",\n            \"Tooltip\": \"Is it possible to revoke a certificate / check a certificate against a revocation list?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ],\n        \"ComponentTypeID\": 1,\n        \"IsActive\": true\n      }\n    ],\n    \"myComponentSWTypeGroups\": [\n      {\n        \"ID\": \"c91d3152-cf81-44d2-b65c-b9ab2cc0f8f9\",\n        \"Name\": \"Core\",\n        \"Description\": \"\",\n        \"myComponentTypeIDs\": [\n          \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n          \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n          \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n          \"9926788f-c85e-43ca-91e4-aa9c0f46656e\",\n          \"2d746c06-a57d-41af-9712-f9d8059425eb\",\n          \"6c83ccbc-ffbd-4bd6-b207-07386e3393c5\",\n          \"ea189855-6883-489f-a3d0-77d4ac51a6ef\"\n        ],\n        \"ComponentTypeID\": 1\n      },\n      {\n        \"ID\": \"4845aa7b-55f5-44e5-9187-ac53964300d9\",\n        \"Name\": \"Base\",\n        \"Description\": \"\",\n        \"myComponentTypeIDs\": [\n          \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n          \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n          \"44545d3e-fa0a-44c7-a19e-8164dab646dc\",\n          \"463570ce-8495-4b4b-97fe-abed4942059a\",\n          \"7e64d98b-ecbe-4921-9545-8b30d0f9bde8\",\n          \"02b94aae-efea-451e-a017-81be68db03d7\"\n        ],\n        \"ComponentTypeID\": 1\n      },\n      {\n        \"ID\": \"af7ed765-9e95-4a90-8764-cdd33826003f\",\n        \"Name\": \"Connectivity\",\n        \"Description\": \"\",\n        \"myComponentTypeIDs\": [\n          \"dda38dcf-c681-4aa7-831a-7d0943ffbdcf\",\n          \"693eb3c8-9d8a-42ce-91aa-0ac4c190d7dc\",\n          \"c80fa1ff-def0-49b3-ad47-0c9f56c21fe6\",\n          \"fe464818-7cef-4aba-9d18-0bc2357ca56c\",\n          \"2673ba36-ece0-462b-b115-0edb2c17828f\"\n        ],\n        \"ComponentTypeID\": 1\n      },\n      {\n        \"ID\": \"9a10995f-e765-487a-b357-51e22d7e5f6b\",\n        \"Name\": \"App\",\n        \"Description\": \"\",\n        \"myComponentTypeIDs\": [\n          \"ce3cdda1-0737-468e-83e7-ca20098551d1\",\n          \"a6659758-d5b9-47ab-961e-a77703652cf4\",\n          \"2ca79dc4-0a73-4fc2-859b-1b5701530183\",\n          \"bc2d8f91-7339-4153-bc54-596985edc9c5\"\n        ],\n        \"ComponentTypeID\": 1\n      }\n    ],\n    \"myComponentPTypes\": [\n      {\n        \"ID\": \"25032887-439e-4599-84bf-05d906641a0b\",\n        \"Name\": \"Incident Reponse\",\n        \"Description\": \"See IoT Security Foundation: Vulnerability Disclosure\",\n        \"ComponentTypeID\": 2,\n        \"IsActive\": true,\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Has Vulnerability Disclosure\",\n            \"ID\": \"dd2c4c41-45f0-4105-aea4-317943e2f435\",\n            \"Tooltip\": \"Does the manufacturer enable a coordinated vulnerability disclosure?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Bug Bounty Program\",\n            \"ID\": \"b4c47f35-bcd3-4b18-9b35-8a7f213dcca4\",\n            \"Tooltip\": \"Is there a bug bounty program?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Provide Timeline Info\",\n            \"ID\": \"e7d90cc4-822e-4aab-a161-c766cf13df22\",\n            \"Tooltip\": \"Is there information on the timelines for acknowledgement and resolution of reported issues?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ]\n      },\n      {\n        \"ID\": \"cdcdd88c-7ec2-4b18-8d72-bcb0e402ca5d\",\n        \"Name\": \"Update Policy\",\n        \"Description\": \"\",\n        \"Properties\": [],\n        \"ComponentTypeID\": 2,\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"8902950a-6c5e-426b-baa2-71794e74f720\",\n        \"Name\": \"Penetration Testing\",\n        \"Description\": \"\",\n        \"Properties\": [],\n        \"ComponentTypeID\": 2,\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"0f33d280-4c59-4f4c-96ba-c3688a28b4ba\",\n        \"Name\": \"Secure Coding Standards\",\n        \"Description\": \"\",\n        \"Properties\": [],\n        \"ComponentTypeID\": 2,\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"dab1370c-408e-45a0-9552-bae85d15b0fe\",\n        \"Name\": \"Security Requirements for External Components\",\n        \"Description\": \"\",\n        \"Properties\": [],\n        \"ComponentTypeID\": 2,\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"4ba356ca-b581-4dab-a0cf-b401f4422ee0\",\n        \"Name\": \"Private Key Handling\",\n        \"Description\": \"\",\n        \"Properties\": [],\n        \"ComponentTypeID\": 2,\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"f0f7230f-18e3-4074-8d24-99e71b76bddf\",\n        \"Name\": \"Defense-in-Depth Concept\",\n        \"Description\": \"\",\n        \"Properties\": [],\n        \"ComponentTypeID\": 2,\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"60915dd6-ce8f-4c7a-ace9-0fd2eef08094\",\n        \"Name\": \"Patch Policy\",\n        \"Description\": \"\",\n        \"Properties\": [],\n        \"ComponentTypeID\": 2,\n        \"IsActive\": true\n      },\n      {\n        \"ID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n        \"Name\": \"Incident Detection\",\n        \"Description\": \"\",\n        \"Properties\": [\n          {\n            \"DisplayName\": \"Has Reporting System\",\n            \"ID\": \"23943ca9-3df9-4d69-a414-6d8fef99d30c\",\n            \"Tooltip\": \"Is there a public vulnerability reporting system?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has /security Page\",\n            \"ID\": \"36e1de4b-5129-470f-b06d-208ef7610da8\",\n            \"Tooltip\": \"Does the website of the manufacturer use /security to provide security-related topics?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Security.txt\",\n            \"ID\": \"3affc4da-9a78-43ec-990b-75d20edbc410\",\n            \"Tooltip\": \"Does the website of the manufacturer provide a security.txt including all security-related sites and contact information?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Contact Email Address\",\n            \"ID\": \"d94f2535-73f9-4c2d-aef1-57b1c9daaa5c\",\n            \"Tooltip\": \"Does the manufacturer provide an email account for security related topics?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has Public Policy\",\n            \"ID\": \"0c7bdef9-6b56-42db-a22b-a460b08bb27d\",\n            \"Tooltip\": \"Is there are publicly available vulnerability disclosure policy?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          },\n          {\n            \"DisplayName\": \"Has PGP Key\",\n            \"ID\": \"61d4b9c9-19a9-431e-b114-f2c04b48846b\",\n            \"Tooltip\": \"Does the manufacturer provide a PGP on their website for secure communication?\",\n            \"HasGetter\": false,\n            \"Editable\": true,\n            \"Type\": \"Check Box\"\n          }\n        ],\n        \"ComponentTypeID\": 2,\n        \"IsActive\": true\n      }\n    ],\n    \"myComponentPTypeGroups\": [\n      {\n        \"ID\": \"152dc4f8-0f67-4967-bb95-0994a48082f3\",\n        \"Name\": \"Secure Design and Implementation\",\n        \"Description\": \"\",\n        \"myComponentTypeIDs\": [\n          \"0f33d280-4c59-4f4c-96ba-c3688a28b4ba\",\n          \"f0f7230f-18e3-4074-8d24-99e71b76bddf\"\n        ],\n        \"ComponentTypeID\": 2\n      },\n      {\n        \"ID\": \"d6257d70-4fbd-41a5-92d2-7dd7be9e447c\",\n        \"Name\": \"Security Management\",\n        \"Description\": \"\",\n        \"myComponentTypeIDs\": [\n          \"dab1370c-408e-45a0-9552-bae85d15b0fe\",\n          \"4ba356ca-b581-4dab-a0cf-b401f4422ee0\"\n        ],\n        \"ComponentTypeID\": 2\n      },\n      {\n        \"ID\": \"a867f0e6-c920-4b9f-a6a9-0947780695b0\",\n        \"Name\": \"Update Management\",\n        \"Description\": \"\",\n        \"myComponentTypeIDs\": [\n          \"cdcdd88c-7ec2-4b18-8d72-bcb0e402ca5d\",\n          \"60915dd6-ce8f-4c7a-ace9-0fd2eef08094\"\n        ],\n        \"ComponentTypeID\": 2\n      },\n      {\n        \"ID\": \"55e4ff75-c735-40ef-a97d-031f4df2d4ec\",\n        \"Name\": \"Incident Management\",\n        \"Description\": \"\",\n        \"myComponentTypeIDs\": [\n          \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n          \"25032887-439e-4599-84bf-05d906641a0b\"\n        ],\n        \"ComponentTypeID\": 2\n      },\n      {\n        \"ID\": \"534fe08c-c722-40b6-b7d6-ed5deee2eebc\",\n        \"Name\": \"Security Verification\",\n        \"Description\": \"\",\n        \"myComponentTypeIDs\": [\n          \"8902950a-6c5e-426b-baa2-71794e74f720\"\n        ],\n        \"ComponentTypeID\": 2\n      }\n    ],\n    \"threatCategoryGroups\": [\n      {\n        \"ID\": \"9d6172db-e842-48e9-bb18-6137a6ae60ee\",\n        \"Name\": \"Nefarious Activity / Abuse / Misuse\",\n        \"Description\": \"\",\n        \"threatCategorieIDs\": [\n          \"2dcb00d0-d8a3-4dbc-9efa-d33783a8106b\",\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"6de4f75a-bc96-4f32-b18f-867eac0e8fda\",\n          \"9e715340-1a69-47df-864a-7c3b5a9a678e\",\n          \"4f5e6bf4-c9c4-4ea6-9b0e-5c861570e6ec\",\n          \"c17cbe5c-3210-42fc-be1e-05f1f915865b\"\n        ]\n      },\n      {\n        \"ID\": \"415f75e3-24f1-4d5f-9e0b-9e66b134d728\",\n        \"Name\": \"Attack Preparation / Persistence\",\n        \"Description\": \"\",\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\",\n          \"c8a14b27-b13f-4358-9f3f-691d01c97c77\",\n          \"b1ff0675-f9b7-4ffb-bdd5-f621c6580d9a\"\n        ]\n      },\n      {\n        \"ID\": \"08340ecc-e53f-4ab6-8573-af18bcce9e92\",\n        \"Name\": \"Damage / Destruction / Harm / Loss\",\n        \"Description\": \"\",\n        \"threatCategorieIDs\": [\n          \"88d19822-b1b0-469f-ae00-1bc600ccaa1d\",\n          \"644f8521-6b49-41bc-86df-4064b89fb881\",\n          \"96bdc11d-dbb0-4785-8a5c-373e2c492eb0\",\n          \"3915215b-3414-4b2e-8446-9763398790ec\",\n          \"a6a57921-7fcb-4f54-b0f5-bac0a0f74163\",\n          \"bc4b439c-6197-48d3-a308-7fd323d2ea5e\",\n          \"6b8c08cb-3f02-413a-96b4-179bb1f67997\",\n          \"4d0bb854-2843-4d47-8b2c-043f7b8e4b4f\",\n          \"08d8fbba-5de4-4538-8674-43e214c3ebad\"\n        ]\n      },\n      {\n        \"ID\": \"d44618e3-6f7e-48bd-ba5d-9cef76e4de29\",\n        \"Name\": \"Espionage / Interception / Tampering\",\n        \"Description\": \"\",\n        \"threatCategorieIDs\": [\n          \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n          \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n          \"61d04f2d-83b1-4152-9aba-4ad188eef06d\",\n          \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n        ]\n      },\n      {\n        \"ID\": \"8cc887d4-ac13-4e73-a683-9ce3f7d108a2\",\n        \"Name\": \"Intellectual Property Theft\",\n        \"Description\": \"\",\n        \"threatCategorieIDs\": [\n          \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\",\n          \"70d07015-4eda-4d1a-8d07-1791f881f8f0\",\n          \"2e50cdf4-cc94-4a32-98ee-825028a1f476\"\n        ]\n      },\n      {\n        \"ID\": \"2c19e683-971c-4389-bf96-3963e6a1dd56\",\n        \"Name\": \"Legal\",\n        \"Description\": \"\",\n        \"threatCategorieIDs\": [\n          \"3bdf3019-02dd-4c7f-bffc-90189b39e6a7\",\n          \"180a9034-735c-44ca-a96a-693cb48ffaa7\",\n          \"1180824d-9f8a-4a4a-8398-3775c541a360\",\n          \"647ed950-8b8a-4a3f-b3f0-d9967c7d218f\"\n        ]\n      },\n      {\n        \"ID\": \"6fb5aeac-180b-4ed5-b246-ad888cfd91aa\",\n        \"Name\": \"Malfunction / Failure\",\n        \"Description\": \"\",\n        \"threatCategorieIDs\": [\n          \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\",\n          \"0285f001-a384-42de-ae6d-6bfbc488c92c\",\n          \"f3fe9ca9-4c34-40fc-a270-3e6252d01e6f\",\n          \"b7935cfe-6a41-45e4-8778-f0fbb1e4018b\",\n          \"5f7607f8-e67d-40f2-a902-33c6cfe298c3\",\n          \"3fb90b77-a990-4d5b-bb8a-fce5e36d8f71\"\n        ]\n      },\n      {\n        \"ID\": \"fdbef5e1-5195-4c19-9059-918c81091003\",\n        \"Name\": \"Outage\",\n        \"Description\": \"\",\n        \"threatCategorieIDs\": [\n          \"f2b91aaf-7d9f-4baf-8713-13d7625174d9\",\n          \"bafd3162-d833-4bf4-beb8-ce95239cb4b4\",\n          \"2c064bb4-aa49-4e20-ad72-333748a5e497\",\n          \"7cf3480c-f4db-47cb-be36-b27deb746c64\"\n        ]\n      },\n      {\n        \"ID\": \"1f2b7a03-b882-47d8-a6c0-ae693145a60a\",\n        \"Name\": \"Privacy\",\n        \"Description\": \"\",\n        \"threatCategorieIDs\": [\n          \"bcd08af5-29bf-4ed8-ab6c-e311e88f4c84\",\n          \"d6eafa9e-6d9d-42aa-a734-0eb11f25607b\",\n          \"11a5c06f-875c-43fa-a01f-79f4819f98dd\",\n          \"787846f0-3f3c-4807-a99d-881383591051\",\n          \"2765e61e-29a9-498e-adf8-4d653f488e3d\",\n          \"af3ee78e-9e83-4bd1-b9b5-13ec28765518\",\n          \"e6ba8518-0074-492c-95e5-ebe89fa601fe\"\n        ]\n      },\n      {\n        \"ID\": \"a07a29b8-0414-4d10-bf57-71dcb697d734\",\n        \"Name\": \"Unintentional / Disaster\",\n        \"Description\": \"\",\n        \"threatCategorieIDs\": [\n          \"21a0d68d-6bc3-4d4b-8ccb-98b70adc07a6\",\n          \"d9a0d5d5-0c36-45df-9815-ae89ec254677\"\n        ]\n      },\n      {\n        \"ID\": \"0f772ed4-0e03-4ddc-8e4d-200422c299c3\",\n        \"Name\": \"STRIDE\",\n        \"Description\": \"\",\n        \"threatCategorieIDs\": [\n          \"3bbe354c-317a-4f76-bdbb-75543b5d5aa4\",\n          \"f0e814f3-b3d2-4357-b155-8fffd70ec42e\",\n          \"a77f314c-f74e-4340-a993-5a1a24f26db4\",\n          \"369640cc-1b53-4a2e-9e3b-a74c187e68e7\",\n          \"422b9042-212d-4467-a000-2528a2e09f8b\",\n          \"8687e614-c127-418b-8fda-536bb2f0708f\"\n        ]\n      }\n    ],\n    \"threatCategories\": [\n      {\n        \"ID\": \"6de4f75a-bc96-4f32-b18f-867eac0e8fda\",\n        \"Name\": \"Misuse of computing power\",\n        \"Description\": \"Starting DDoS attacks; Sending spam mails; Mining of crypto currencies\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": true,\n          \"Reputation\": true,\n          \"Customer Satisfcation\": true,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"9e715340-1a69-47df-864a-7c3b5a9a678e\",\n        \"Name\": \"Misuse of electrical power\",\n        \"Description\": \"Charging the phone; Rewiring to other equipment\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": true,\n          \"Reputation\": true,\n          \"Customer Satisfcation\": true,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"c46b7c74-5979-409d-8ceb-631b8833c596\",\n        \"Name\": \"Obtaining of control\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": true,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"c8a14b27-b13f-4358-9f3f-691d01c97c77\",\n        \"Name\": \"Obtaining of higher priviliges\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": true,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"b1ff0675-f9b7-4ffb-bdd5-f621c6580d9a\",\n        \"Name\": \"Keeping access/control\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": true,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"2dcb00d0-d8a3-4dbc-9efa-d33783a8106b\",\n        \"Name\": \"Abuse of personal data\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": true,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n        \"Name\": \"Code/Data tampering/poisoning\",\n        \"Description\": \"Manipulating the system in order to make it work (slightly) different\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": true,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n        \"Name\": \"Denial of service\",\n        \"Description\": \"Putting the system in a state in which it can't fulfill it's service (e.g., setting invalid configurations, flooding with network requests)\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": true,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": true,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n        \"Name\": \"Information disclosure/leaking\",\n        \"Description\": \"Extracting (secret) information to unauthorized users\",\n        \"ImpactCats\": {\n          \"Confidentiality\": true,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"4f5e6bf4-c9c4-4ea6-9b0e-5c861570e6ec\",\n        \"Name\": \"Privilege abuse\",\n        \"Description\": \"Reading data/logs to monitor other users; Using insider knowledge for personal gain (e.g., stock trading)\",\n        \"ImpactCats\": {\n          \"Confidentiality\": true,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"c17cbe5c-3210-42fc-be1e-05f1f915865b\",\n        \"Name\": \"Repudiation of actions\",\n        \"Description\": \"Denying performed actions or usage of the system\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": true,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\",\n        \"Name\": \"Hardware IP theft\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": true,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"70d07015-4eda-4d1a-8d07-1791f881f8f0\",\n        \"Name\": \"Software IP theft\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": true,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"2e50cdf4-cc94-4a32-98ee-825028a1f476\",\n        \"Name\": \"Process IP theft\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": true,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"88d19822-b1b0-469f-ae00-1bc600ccaa1d\",\n        \"Name\": \"Hardware destruction\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": true,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": true,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": true,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"644f8521-6b49-41bc-86df-4064b89fb881\",\n        \"Name\": \"Software destruction\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": true,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": true,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": true,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"96bdc11d-dbb0-4785-8a5c-373e2c492eb0\",\n        \"Name\": \"Data destruction\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": true,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": true,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": true,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"3915215b-3414-4b2e-8446-9763398790ec\",\n        \"Name\": \"Environmental damage\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": true,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"a6a57921-7fcb-4f54-b0f5-bac0a0f74163\",\n        \"Name\": \"Financial loss\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": true,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"bc4b439c-6197-48d3-a308-7fd323d2ea5e\",\n        \"Name\": \"Human harm\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": true,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"6b8c08cb-3f02-413a-96b4-179bb1f67997\",\n        \"Name\": \"Property loss/theft\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": true,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"4d0bb854-2843-4d47-8b2c-043f7b8e4b4f\",\n        \"Name\": \"Reputational damage\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": true,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"08d8fbba-5de4-4538-8674-43e214c3ebad\",\n        \"Name\": \"Waste of resources\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": true,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n        \"Name\": \"Traffic sniffing\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": true,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n        \"Name\": \"Identity and data spoofing\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": true,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"61d04f2d-83b1-4152-9aba-4ad188eef06d\",\n        \"Name\": \"Surveillance\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": true,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"f7639a0c-e85b-4947-bbec-2ac4a0911827\",\n        \"Name\": \"Traffic data tampering\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": true,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"3bdf3019-02dd-4c7f-bffc-90189b39e6a7\",\n        \"Name\": \"Breach of service-level agreement\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": true,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"180a9034-735c-44ca-a96a-693cb48ffaa7\",\n        \"Name\": \"Breach of legislation\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": true,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"1180824d-9f8a-4a4a-8398-3775c541a360\",\n        \"Name\": \"Loss of compliance\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": true,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"647ed950-8b8a-4a3f-b3f0-d9967c7d218f\",\n        \"Name\": \"Unauthorized use of copyright material\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": true,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\",\n        \"Name\": \"Application malfunction\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": true,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": true,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"0285f001-a384-42de-ae6d-6bfbc488c92c\",\n        \"Name\": \"AI application malfunction\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": true,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": true,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"f3fe9ca9-4c34-40fc-a270-3e6252d01e6f\",\n        \"Name\": \"Communication malfunction\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": true,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": true,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"b7935cfe-6a41-45e4-8778-f0fbb1e4018b\",\n        \"Name\": \"Process malfunction\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": true,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": true,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"5f7607f8-e67d-40f2-a902-33c6cfe298c3\",\n        \"Name\": \"Hardware failure\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": true,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": true,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"3fb90b77-a990-4d5b-bb8a-fce5e36d8f71\",\n        \"Name\": \"Software failure\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": true,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": true,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"f2b91aaf-7d9f-4baf-8713-13d7625174d9\",\n        \"Name\": \"Communication outage\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"bafd3162-d833-4bf4-beb8-ce95239cb4b4\",\n        \"Name\": \"Infrastructure outage\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"2c064bb4-aa49-4e20-ad72-333748a5e497\",\n        \"Name\": \"Loss of support services\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"7cf3480c-f4db-47cb-be36-b27deb746c64\",\n        \"Name\": \"Power outage\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"21a0d68d-6bc3-4d4b-8ccb-98b70adc07a6\",\n        \"Name\": \"Environmental conditions\",\n        \"Description\": \"ToDo: Corrosion, Frostiness, Heat/Fire, Mechanical stress, Over-voltage, Low-voltage, Water, Moisture, Pollution\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"d9a0d5d5-0c36-45df-9815-ae89ec254677\",\n        \"Name\": \"Natural disasters\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": true,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": true,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"bcd08af5-29bf-4ed8-ab6c-e311e88f4c84\",\n        \"Name\": \"Identification\",\n        \"Description\": \"Identification denotes the threat of associating a (persistent) identifier, e.g. a name and address or a pseudonym of any kind, with an individual and data about him.\\n-- Ziegeldorf et. al, Privacy in the Internet of Things: Threats and Challenges\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"d6eafa9e-6d9d-42aa-a734-0eb11f25607b\",\n        \"Name\": \"Inventory attacks\",\n        \"Description\": \"Inventory attacks refer to the unauthorized collection of information about the existence and characteristics of personal things.\\n-- Ziegeldorf et. al, Privacy in the Internet of Things: Threats and Challenges\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"11a5c06f-875c-43fa-a01f-79f4819f98dd\",\n        \"Name\": \"Lifecycle transitions\",\n        \"Description\": \"Privacy is threatened when smart things disclose private information during changes of control spheres in their lifecycle.\\n-- Ziegeldorf et. al, Privacy in the Internet of Things: Threats and Challenges\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"787846f0-3f3c-4807-a99d-881383591051\",\n        \"Name\": \"Linkage\",\n        \"Description\": \"This threat consists in linking different previously separated systems such that the combination of data sources reveals (truthful or erroneous) information that the subject did not disclose to the previously isolated sources and, most importantly, also did not want to reveal.\\n-- Ziegeldorf et. al, Privacy in the Internet of Things: Threats and Challenges\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"2765e61e-29a9-498e-adf8-4d653f488e3d\",\n        \"Name\": \"Localization and tracking\",\n        \"Description\": \"Localization and tracking is the threat of determining and recording a person’s location through time and space.\\n-- Ziegeldorf et. al, Privacy in the Internet of Things: Threats and Challenges\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"af3ee78e-9e83-4bd1-b9b5-13ec28765518\",\n        \"Name\": \"Privacy-violating interaction and presentation\",\n        \"Description\": \"This threat refers to conveying private information through a public medium and in the process disclosing it to an unwanted audience. It can be loosely sketched as shoulder- surfing but in real-world environments.\\n-- Ziegeldorf et. al, Privacy in the Internet of Things: Threats and Challenges\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"e6ba8518-0074-492c-95e5-ebe89fa601fe\",\n        \"Name\": \"Profiling\",\n        \"Description\": \"Profiling denotes the threat of compiling information dossiers about individuals in order to infer interests by correlation with other profiles and data.\\n-- Ziegeldorf et. al, Privacy in the Internet of Things: Threats and Challenges\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"3bbe354c-317a-4f76-bdbb-75543b5d5aa4\",\n        \"Name\": \"Spoofing\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"f0e814f3-b3d2-4357-b155-8fffd70ec42e\",\n        \"Name\": \"Tampering\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"a77f314c-f74e-4340-a993-5a1a24f26db4\",\n        \"Name\": \"Repudiation\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"369640cc-1b53-4a2e-9e3b-a74c187e68e7\",\n        \"Name\": \"Information disclosure\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"422b9042-212d-4467-a000-2528a2e09f8b\",\n        \"Name\": \"Denial of Service\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"8687e614-c127-418b-8fda-536bb2f0708f\",\n        \"Name\": \"Elevation of Privileges\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": false,\n          \"Integrity\": false,\n          \"Availability\": false,\n          \"Authorization\": false,\n          \"Authenticity\": false,\n          \"Non-repudiation\": false,\n          \"Safety\": false,\n          \"Privacy\": false,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      },\n      {\n        \"ID\": \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n        \"Name\": \"Execution of unauthorized code\",\n        \"Description\": \"\",\n        \"ImpactCats\": {\n          \"Confidentiality\": true,\n          \"Integrity\": true,\n          \"Availability\": true,\n          \"Authorization\": true,\n          \"Authenticity\": true,\n          \"Non-repudiation\": true,\n          \"Safety\": true,\n          \"Privacy\": true,\n          \"Compliance\": false,\n          \"Financial\": false,\n          \"Reputation\": false,\n          \"Customer Satisfcation\": false,\n          \"Production Process\": false,\n          \"Auditability\": false,\n          \"Trustworthiness\": false\n        }\n      }\n    ],\n    \"threatOriginGroups\": [\n      {\n        \"ID\": \"e17870ae-2c37-435c-a284-8df90ff7a5f0\",\n        \"Name\": \"Threat Library\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [\n          \"037c0934-3db3-4320-a580-3581ec92f627\",\n          \"4e160ff0-f1c9-4d2b-a470-6b23ab9c8868\",\n          \"bee6117a-63ee-41b5-b77a-dd2b2b25cec8\",\n          \"a1ddc171-0321-4131-ae58-25b39006320a\",\n          \"e112d000-a2e3-40c0-acdc-1b7856ad99e0\",\n          \"fa6a378a-0e74-43b0-960b-b37576081160\",\n          \"29a5994a-1de4-46e2-94c4-3b9832fff28e\",\n          \"e98488d0-f4ac-49ad-8648-d32ae9563225\",\n          \"1a63ed36-ee55-4773-89d5-8cd466f34cad\",\n          \"98dacc1a-f9e4-46b0-84c2-8718d9301cbb\"\n        ],\n        \"threatOriginIDs\": []\n      },\n      {\n        \"ID\": \"037c0934-3db3-4320-a580-3581ec92f627\",\n        \"Name\": \"Cryptography Attacks\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": [\n          \"0ffd675d-d83c-4f74-8835-398e7f3930cb\",\n          \"31f89637-4b8a-41e9-acac-9d012767a424\",\n          \"97b5a1d4-be82-4485-82f6-e4532795a20b\",\n          \"a20d6e53-4426-4700-a04f-a4018bc7bfce\",\n          \"680ceebd-357c-49d6-8bfd-390dc6c51dde\",\n          \"a0729a41-bcc9-43d8-9c86-bfb26c64e93c\"\n        ]\n      },\n      {\n        \"ID\": \"4e160ff0-f1c9-4d2b-a470-6b23ab9c8868\",\n        \"Name\": \"Network Attacks\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": [\n          \"e58fcbde-e429-4704-9f22-c00d187994bc\",\n          \"8f9a24d4-e962-4136-b0ec-8e9f797a6f62\",\n          \"23c3a785-a539-4570-aee0-42bdffb43983\",\n          \"0b47795b-b42d-49d1-bf50-7f4889994fea\",\n          \"bb7358c1-e5b6-424f-962d-daab17345b63\",\n          \"001ba17c-0400-4369-912e-0ceda3ccd227\",\n          \"1447713d-9ad6-454e-81d8-c9f4ef34c72b\",\n          \"f5949698-47d4-48ee-a116-2d212695c41f\",\n          \"b8835cb9-3c77-496e-ac2d-2ed6fa7f2d78\",\n          \"c7787e71-5c70-462c-9558-ce20e7cfdfe8\"\n        ]\n      },\n      {\n        \"ID\": \"bee6117a-63ee-41b5-b77a-dd2b2b25cec8\",\n        \"Name\": \"Chip-Level Attacks\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": [\n          \"b703d3d9-1f29-480a-b7ad-b11716727a91\",\n          \"8a6476b9-7a5c-4306-bd43-db6fe32bbf66\",\n          \"1a99fb9b-d1f0-4215-93a6-5cd9fd272026\",\n          \"9e85cf25-febb-46ca-a5f5-c6283412a87b\",\n          \"c097b67f-1179-4f30-924c-3a4e54c04d9d\",\n          \"d4292863-c64e-4123-806f-71590ec76ed3\",\n          \"e6c3d6f5-f4c7-48b7-b516-2092c3557c81\"\n        ]\n      },\n      {\n        \"ID\": \"a1ddc171-0321-4131-ae58-25b39006320a\",\n        \"Name\": \"PCB-Level Attacks\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": [\n          \"f6ddb913-05ab-485a-a736-46a3f7466f85\",\n          \"5605adab-044a-4b1f-9344-90a602d8d448\",\n          \"e851a284-6b41-41c9-9efd-dc8b01f788da\",\n          \"be14adbc-19a7-48c8-8f13-2566559e63e2\",\n          \"915f674e-926b-4bd9-94cb-ee8b4637bc80\",\n          \"184cd5e5-2517-4d7f-a81a-c411942d3601\"\n        ]\n      },\n      {\n        \"ID\": \"53298967-848a-4d3f-8577-a54d76942a8e\",\n        \"Name\": \"Sub Group\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": []\n      },\n      {\n        \"ID\": \"c3c1c9ff-637f-4964-8de5-994de73927f8\",\n        \"Name\": \"Sub Sub Group\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [\n          \"dbbb888b-1a29-4ba4-8245-9af87316f4f9\"\n        ],\n        \"threatOriginIDs\": []\n      },\n      {\n        \"ID\": \"dbbb888b-1a29-4ba4-8245-9af87316f4f9\",\n        \"Name\": \"Sub Sub Sub Group\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": []\n      },\n      {\n        \"ID\": \"e112d000-a2e3-40c0-acdc-1b7856ad99e0\",\n        \"Name\": \"Firmware Attacks\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": [\n          \"99864969-3b71-45ad-bae5-09bc4ecc5cc1\",\n          \"24645edb-85ac-438b-9033-ba2721c3e2c7\",\n          \"5656f112-8443-4245-aa38-38cd9d9375e0\",\n          \"f0a8edb7-d65f-423f-a391-120d1eb04e02\",\n          \"01a37617-b7ac-446a-86fa-e70c957d154c\",\n          \"97c0d7a1-13c7-43d5-b03c-75845f973af5\",\n          \"ef144ae1-4c70-400e-8222-b8a7dd3bf3e9\",\n          \"d46f6e31-ae41-4d6e-93fc-0e6c3bbb295d\",\n          \"c23a62c8-901a-412b-80b8-d2574103b733\",\n          \"83d23b79-71c5-488e-adb2-dd0f76d70f44\",\n          \"f170308a-c188-4ae0-bcef-d04af1e429b3\",\n          \"eab94c5b-f7e8-4b2a-9ffb-658aefc8f0d0\"\n        ]\n      },\n      {\n        \"ID\": \"fa6a378a-0e74-43b0-960b-b37576081160\",\n        \"Name\": \"Application Attacks\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": [\n          \"7dc1eb8e-2312-4b2f-becf-f9725d45cdce\",\n          \"d92ccd9c-3a24-4e07-a2ca-c1e9949bb386\",\n          \"1a511f9e-5d1b-47b9-9071-4d39407cc75c\",\n          \"9538abd8-f79c-4097-b2dd-716e50a125ee\",\n          \"573881b4-ceb6-4d6a-a5c3-9c0e6c5a3b3c\",\n          \"a76b8768-9d68-4074-b5e1-0f9abc61bcda\",\n          \"cf63f187-4353-4bf8-bc37-a7392c6d91bf\",\n          \"66c5f951-6286-4b22-a71a-ee4d6232f689\"\n        ]\n      },\n      {\n        \"ID\": \"29a5994a-1de4-46e2-94c4-3b9832fff28e\",\n        \"Name\": \"Supply Chain Attacks\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": [\n          \"327a2f35-8cf5-46d5-a973-a174f6f7be23\",\n          \"90a4e8f3-c750-47c4-97fd-fa9e25b9b599\",\n          \"21c6b5ef-82c7-41e5-bb07-de93445b2156\",\n          \"a912b48a-3b4d-44ab-b8f3-28000ca945c4\"\n        ]\n      },\n      {\n        \"ID\": \"e98488d0-f4ac-49ad-8648-d32ae9563225\",\n        \"Name\": \"Ecosystem Weaknesses\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": [\n          \"30cf5142-2339-4130-8a6e-2b05869e6df2\",\n          \"afd4bceb-31b0-41cd-9eae-02d2eba6b41c\"\n        ]\n      },\n      {\n        \"ID\": \"1a63ed36-ee55-4773-89d5-8cd466f34cad\",\n        \"Name\": \"User Behavior\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [\n          \"abf604c4-90f4-41fe-9084-dd2c655d12e8\"\n        ],\n        \"threatOriginIDs\": [\n          \"195d942e-02f8-49ad-873f-299f4b4ad4ec\",\n          \"ffd6083b-7183-472c-b250-15b0de223735\"\n        ]\n      },\n      {\n        \"ID\": \"98dacc1a-f9e4-46b0-84c2-8718d9301cbb\",\n        \"Name\": \"Credential Attacks\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": [\n          \"f0ef09ed-0cde-4b12-beb6-f1640132f3e6\",\n          \"0e3c0e3e-1587-46f8-93ea-e9091dff5958\",\n          \"b9436449-7896-4be6-89f8-a19e1c8d014f\",\n          \"5435aa9a-ad52-470f-8fa5-81a4f926b6a6\",\n          \"723dfb40-4ceb-4232-bda5-73bcb3c76ac0\",\n          \"5e7fd04c-0e14-4c76-800d-f581bcf7c7f6\",\n          \"63dfaefa-c8a8-4725-b6d6-2efff7306639\",\n          \"296e95fe-e06d-4ae3-be84-da98df4a122c\",\n          \"4ee3fc8a-87a5-4fdf-868f-fb35cd12dc91\",\n          \"bf289171-82c3-431a-b3f1-28d17e5a6546\",\n          \"2f483201-0209-4320-ba2e-2d692274aab5\",\n          \"05e04798-41ce-4919-a92b-264f7e985de2\"\n        ]\n      },\n      {\n        \"ID\": \"abf604c4-90f4-41fe-9084-dd2c655d12e8\",\n        \"Name\": \"Social Engineering\",\n        \"Description\": \"\",\n        \"threatOriginGroupIDs\": [],\n        \"threatOriginIDs\": [\n          \"cf948333-b659-40ff-b93f-d4bdc8c980d1\"\n        ]\n      }\n    ],\n    \"threatOrigins\": [\n      {\n        \"ID\": \"0ffd675d-d83c-4f74-8835-398e7f3930cb\",\n        \"Name\": \"Insufficient random values\",\n        \"Description\": \"Use of insufficiently random values\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Weakness\": {\n          \"CWEID\": 330\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n          \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n        ],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"e58fcbde-e429-4704-9f22-c00d187994bc\",\n        \"Name\": \"Man-in-the-Middle attack\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"Weakness\": {},\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"AttackTechnique\": {\n          \"CAPECID\": 94,\n          \"CVSS\": {\n            \"AV\": \"N\",\n            \"AC\": \"L\",\n            \"PR\": \"N\",\n            \"UI\": \"N\",\n            \"S\": \"U\",\n            \"C\": \"H\",\n            \"I\": \"H\",\n            \"A\": \"L\",\n            \"Score\": 9.4\n          }\n        },\n        \"threatCategorieIDs\": [],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"f6ddb913-05ab-485a-a736-46a3f7466f85\",\n        \"Name\": \"Reverse engineering/Cloning\",\n        \"Description\": \"Extracting the PCB design to understand or clone the product; e.g., by CAD file theft or modern reverse engineering techniques\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"Weakness\": {},\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"AttackTechnique\": {\n          \"CVSS\": {\n            \"AV\": \"P\",\n            \"AC\": \"L\",\n            \"PR\": \"N\",\n            \"UI\": \"N\",\n            \"S\": \"\",\n            \"C\": \"H\",\n            \"I\": \"L\",\n            \"A\": \"N\",\n            \"Score\": 5.2\n          }\n        },\n        \"threatCategorieIDs\": [\n          \"a6a57921-7fcb-4f54-b0f5-bac0a0f74163\",\n          \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\"\n        ],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": true,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"b703d3d9-1f29-480a-b7ad-b11716727a91\",\n        \"Name\": \"Hardware trojan\",\n        \"Description\": \"Malicious design modification / insertion of a hardware Trojan\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"Weakness\": {},\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": true,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Adversaries\": \"Untrusted foundry, untrusted IP vendor, untrusted CAD tool, untrusted design facilities\",\n        \"threatCategorieIDs\": [],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"AttackTechnique\": {\n          \"CAPECID\": 539,\n          \"CVSS\": {}\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"99864969-3b71-45ad-bae5-09bc4ecc5cc1\",\n        \"Name\": \"Firmware not updatable\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1277\n        },\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"31f89637-4b8a-41e9-acac-9d012767a424\",\n        \"Name\": \"Risky crypto implementation\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1240\n        },\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\",\n          \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\"\n        ],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"8a6476b9-7a5c-4306-bd43-db6fe32bbf66\",\n        \"Name\": \"Improper debug access control\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1191\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"1a99fb9b-d1f0-4215-93a6-5cd9fd272026\",\n        \"Name\": \"Internal asset exposure\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1244\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"9e85cf25-febb-46ca-a5f5-c6283412a87b\",\n        \"Name\": \"Improper restriction to hardware features\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1256\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"24645edb-85ac-438b-9033-ba2721c3e2c7\",\n        \"Name\": \"Overlap between protected memory ranges\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {},\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n        ],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"5656f112-8443-4245-aa38-38cd9d9375e0\",\n        \"Name\": \"Sensitive information uncleared\",\n        \"Description\": \"Sensitive information in memory (SRAM) must be cleared when the system performs a power or debug state transition. For example, SRAMs keep their data after a software reset.\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1272\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n        ],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"f0a8edb7-d65f-423f-a391-120d1eb04e02\",\n        \"Name\": \"Boot code protection\",\n        \"Description\": \"Manipulation of boot code in volatile memory to bypass secure boot.\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1274\n        },\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"c097b67f-1179-4f30-924c-3a4e54c04d9d\",\n        \"Name\": \"Physical side channel attacks\",\n        \"Description\": \"Physical side channels expose sensitive information due to patterns in physically observable phenomena such as variations in power consumption, electromagnetic emissions, or acoustic emissions.\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1300\n        },\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n        ],\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"5605adab-044a-4b1f-9344-90a602d8d448\",\n        \"Name\": \"Firmware dumping\",\n        \"Description\": \"Extracting the firmware via physical interfaces\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1324\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": true,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\"\n        ],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"01a37617-b7ac-446a-86fa-e70c957d154c\",\n        \"Name\": \"Firmware overwrite\",\n        \"Description\": \"Overwriting the firmware via a physical interface\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {},\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": true,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\",\n          \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\"\n        ],\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"d4292863-c64e-4123-806f-71590ec76ed3\",\n        \"Name\": \"Improper isolation of shared resoruces\",\n        \"Description\": \"For example, a specific memory range is only accessible with higher privileges. However, the memory is mapped to another range with unrestricted access. See CWE for more examples.\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1189\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"8f9a24d4-e962-4136-b0ec-8e9f797a6f62\",\n        \"Name\": \"Flooding\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"Weakness\": {},\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"b869918c-0b47-45c3-8fab-0b698043aa66\"\n        ],\n        \"AttackTechnique\": {\n          \"CAPECID\": 125,\n          \"CVSS\": {\n            \"AV\": \"N\",\n            \"AC\": \"L\",\n            \"PR\": \"N\",\n            \"UI\": \"N\",\n            \"S\": \"U\",\n            \"C\": \"L\",\n            \"I\": \"N\",\n            \"A\": \"H\",\n            \"Score\": 8.2\n          }\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"97c0d7a1-13c7-43d5-b03c-75845f973af5\",\n        \"Name\": \"Log manipulation\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"Weakness\": {},\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": true,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"c17cbe5c-3210-42fc-be1e-05f1f915865b\"\n        ],\n        \"AttackTechnique\": {\n          \"CAPECID\": 93,\n          \"CVSS\": {\n            \"AV\": \"L\",\n            \"AC\": \"L\",\n            \"PR\": \"\",\n            \"UI\": \"N\",\n            \"S\": \"U\",\n            \"C\": \"L\",\n            \"I\": \"L\",\n            \"A\": \"N\",\n            \"Score\": 5.1\n          }\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"327a2f35-8cf5-46d5-a973-a174f6f7be23\",\n        \"Name\": \"Data from decommissioned device\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1,\n          2\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1266\n        },\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": true\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"AttackTechnique\": {\n          \"CAPECID\": 675,\n          \"CVSS\": {\n            \"AV\": \"L\",\n            \"AC\": \"L\",\n            \"PR\": \"N\",\n            \"UI\": \"N\",\n            \"S\": \"U\",\n            \"C\": \"H\",\n            \"I\": \"N\",\n            \"A\": \"N\",\n            \"Score\": 6.2\n          }\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"7dc1eb8e-2312-4b2f-becf-f9725d45cdce\",\n        \"Name\": \"Personally identifiable info exposure\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 359\n        },\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"AttackTechnique\": {\n          \"CVSS\": {}\n        },\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"23c3a785-a539-4570-aee0-42bdffb43983\",\n        \"Name\": \"Radio jamming\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"Weakness\": {},\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"b869918c-0b47-45c3-8fab-0b698043aa66\"\n        ],\n        \"AttackTechnique\": {\n          \"CAPECID\": 601,\n          \"CVSS\": {\n            \"AV\": \"A\",\n            \"AC\": \"L\",\n            \"PR\": \"N\",\n            \"UI\": \"N\",\n            \"S\": \"U\",\n            \"C\": \"L\",\n            \"I\": \"N\",\n            \"A\": \"H\"\n          }\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"0b47795b-b42d-49d1-bf50-7f4889994fea\",\n        \"Name\": \"Improper certificate validation\",\n        \"Description\": \"Missing or incorrect certificate validation, e.g. improper validation of chain of trust, expiration, revocation, etc. \",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 295\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n          \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n          \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n        ],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"d92ccd9c-3a24-4e07-a2ca-c1e9949bb386\",\n        \"Name\": \"Improper input validation\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 20\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"ef144ae1-4c70-400e-8222-b8a7dd3bf3e9\",\n        \"Name\": \"Cleartext storage of sensitive information \",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 312\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n        ],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"e851a284-6b41-41c9-9efd-dc8b01f788da\",\n        \"Name\": \"Cleartext storage on physical storage\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 313\n        },\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"bb7358c1-e5b6-424f-962d-daab17345b63\",\n        \"Name\": \"Cleartext transmission of sensitive data\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 319\n        },\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\"\n        ],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"001ba17c-0400-4369-912e-0ceda3ccd227\",\n        \"Name\": \"Improper message integrity verification\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 924\n        },\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n          \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n        ],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"1a511f9e-5d1b-47b9-9071-4d39407cc75c\",\n        \"Name\": \"Improper neutralization in SQL command\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1,\n          2\n        ],\n        \"Weakness\": {\n          \"CWEID\": 89\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"AttackTechnique\": {\n          \"CAPECID\": 66,\n          \"CVSS\": {}\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"f0ef09ed-0cde-4b12-beb6-f1640132f3e6\",\n        \"Name\": \"Plaintext password storage\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 256\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"4f5e6bf4-c9c4-4ea6-9b0e-5c861570e6ec\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"0e3c0e3e-1587-46f8-93ea-e9091dff5958\",\n        \"Name\": \"Use of hash w/o salt\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1,\n          2\n        ],\n        \"Weakness\": {\n          \"CWEID\": 759\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"AttackTechnique\": {\n          \"CAPECID\": 55,\n          \"CVSS\": {}\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"d46f6e31-ae41-4d6e-93fc-0e6c3bbb295d\",\n        \"Name\": \"Missing authentication for critical function\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"Weakness\": {\n          \"CWEID\": 306\n        },\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"be14adbc-19a7-48c8-8f13-2566559e63e2\",\n        \"Name\": \"Malicious code implanted during programming\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"Weakness\": {},\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": true,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\"\n        ],\n        \"AttackTechnique\": {\n          \"CAPECID\": 672,\n          \"CVSS\": {}\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"21c6b5ef-82c7-41e5-bb07-de93445b2156\",\n        \"Name\": \"Replacement with malicious peripheral\",\n        \"Description\": \"Alteration of PCB (processor, data store, interface controller, any IC) to bypass restrictions, access data, etc.\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"Weakness\": {},\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": true,\n          \"D\": true,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": true,\n          \"D\": true,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"AttackTechnique\": {\n          \"CAPECID\": 439,\n          \"CVSS\": {}\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"90a4e8f3-c750-47c4-97fd-fa9e25b9b599\",\n        \"Name\": \"Factory oversupply\",\n        \"Description\": \"The contracted manufacturer produces more parts than specified and keeps/resells the surplus.\",\n        \"OriginTypes\": [],\n        \"Weakness\": {},\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": true,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": true,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"a6a57921-7fcb-4f54-b0f5-bac0a0f74163\",\n          \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\"\n        ],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"a912b48a-3b4d-44ab-b8f3-28000ca945c4\",\n        \"Name\": \"Provisioning data cloning\",\n        \"Description\": \"The contracted manufacturer clones data that was initially inserted (e.g., key material).\",\n        \"OriginTypes\": [],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": true,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": true,\n          \"D\": true,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"97b5a1d4-be82-4485-82f6-e4532795a20b\",\n        \"Name\": \"Algorithm downgrade\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n          \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n          \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 757\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"a20d6e53-4426-4700-a04f-a4018bc7bfce\",\n        \"Name\": \"Weak block cipher mode\",\n        \"Description\": \"Deprecated block cipher modes, such as ECB or CBC, do not provide enough security.\",\n        \"OriginTypes\": [],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n          \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n          \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n        ],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"680ceebd-357c-49d6-8bfd-390dc6c51dde\",\n        \"Name\": \"Nonce reuse\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n          \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n          \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 323\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"c23a62c8-901a-412b-80b8-d2574103b733\",\n        \"Name\": \"Firmware downgrade\",\n        \"Description\": \"For practical reasons a downgrade is probably necessary, but security patches should not be reversible (e.g. by using special security version numbers).\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1328\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"a0729a41-bcc9-43d8-9c86-bfb26c64e93c\",\n        \"Name\": \"Inadequate encryption strength\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 326\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"9538abd8-f79c-4097-b2dd-716e50a125ee\",\n        \"Name\": \"Permissive status display\",\n        \"Description\": \"Details about status, configuration, software version, metadata, logging data, operation status, etc. are shown to unauthorized users\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 200\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"b9436449-7896-4be6-89f8-a19e1c8d014f\",\n        \"Name\": \"Missing password field masking\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1,\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 549\n        },\n        \"AttackTechnique\": {\n          \"CAPECID\": 508,\n          \"CVSS\": {\n            \"AV\": \"L\",\n            \"AC\": \"L\",\n            \"PR\": \"N\",\n            \"UI\": \"R\",\n            \"S\": \"U\",\n            \"C\": \"H\",\n            \"I\": \"L\",\n            \"A\": \"L\"\n          }\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"5435aa9a-ad52-470f-8fa5-81a4f926b6a6\",\n        \"Name\": \"Weak password requirements\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 521\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"723dfb40-4ceb-4232-bda5-73bcb3c76ac0\",\n        \"Name\": \"Hard-coded credentials\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 798\n        },\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"5e7fd04c-0e14-4c76-800d-f581bcf7c7f6\",\n        \"Name\": \"Default password\",\n        \"Description\": \"A common vulnerability are default credentials that can be found in the manual.\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"AttackTechnique\": {\n          \"CAPECID\": 560,\n          \"CVSS\": {\n            \"AV\": \"A\",\n            \"A\": \"H\",\n            \"C\": \"H\",\n            \"I\": \"L\",\n            \"Score\": 8.3\n          }\n        },\n        \"Weakness\": {\n          \"CWEID\": 557\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"63dfaefa-c8a8-4725-b6d6-2efff7306639\",\n        \"Name\": \"Single-factor authentication\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 308\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"296e95fe-e06d-4ae3-be84-da98df4a122c\",\n        \"Name\": \"Missing authentication attempt restriction\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1,\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 307\n        },\n        \"AttackTechnique\": {\n          \"CAPECID\": 49,\n          \"CVSS\": {}\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"bf289171-82c3-431a-b3f1-28d17e5a6546\",\n        \"Name\": \"Insufficient session expiration\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 613\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"2f483201-0209-4320-ba2e-2d692274aab5\",\n        \"Name\": \"Password recovery mechanism\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 638\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"4ee3fc8a-87a5-4fdf-868f-fb35cd12dc91\",\n        \"Name\": \"Client-side password hashing\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 836\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"05e04798-41ce-4919-a92b-264f7e985de2\",\n        \"Name\": \"Password hash with predictable salt\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 760\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"e6c3d6f5-f4c7-48b7-b516-2092c3557c81\",\n        \"Name\": \"IC reverse engineering\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\",\n          \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1278\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"1447713d-9ad6-454e-81d8-c9f4ef34c72b\",\n        \"Name\": \"Battery draining attack \",\n        \"Description\": \"Denial of sleep, flooding attacks\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"9e715340-1a69-47df-864a-7c3b5a9a678e\",\n          \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n          \"08d8fbba-5de4-4538-8674-43e214c3ebad\",\n          \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\"\n        ],\n        \"AttackTechnique\": {\n          \"CAPECID\": 125,\n          \"CVSS\": {}\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"195d942e-02f8-49ad-873f-299f4b4ad4ec\",\n        \"Name\": \"HID/Keyboard spoofing\",\n        \"Description\": \"An USB stick imitates a keyboard to inject commands. The stick may be a present or found in the parking lot.\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\",\n          \"b1ff0675-f9b7-4ffb-bdd5-f621c6580d9a\"\n        ],\n        \"AttackTechnique\": {\n          \"CAPECID\": null,\n          \"CVSS\": {\n            \"AV\": \"L\",\n            \"AC\": \"L\",\n            \"PR\": \"L\",\n            \"UI\": \"R\",\n            \"C\": \"H\",\n            \"I\": \"H\",\n            \"A\": \"H\"\n          }\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"cf948333-b659-40ff-b93f-d4bdc8c980d1\",\n        \"Name\": \"Phishing\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"AttackTechnique\": {\n          \"CVSS\": {},\n          \"CAPECID\": 98\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"915f674e-926b-4bd9-94cb-ee8b4637bc80\",\n        \"Name\": \"USB Killer\",\n        \"Description\": \"A device that looks similar to an USB flash drive creates high-voltage pulses to damage/destroy the hardware. This type of attack is also possible at other interfaces than USB as there are publicly available adapter for HDMI and Thunderbolt, for example.\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n          \"88d19822-b1b0-469f-ae00-1bc600ccaa1d\",\n          \"644f8521-6b49-41bc-86df-4064b89fb881\",\n          \"96bdc11d-dbb0-4785-8a5c-373e2c492eb0\"\n        ],\n        \"AttackTechnique\": {\n          \"CVSS\": {\n            \"AV\": \"L\",\n            \"AC\": \"L\",\n            \"PR\": \"N\",\n            \"UI\": \"R\",\n            \"S\": \"U\",\n            \"C\": \"N\",\n            \"I\": \"L\",\n            \"A\": \"H\"\n          }\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"f5949698-47d4-48ee-a116-2d212695c41f\",\n        \"Name\": \"Port scanning\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [],\n        \"AttackTechnique\": {\n          \"CVSS\": {\n            \"AV\": \"A\",\n            \"AC\": \"L\",\n            \"PR\": \"N\",\n            \"UI\": \"N\",\n            \"S\": \"U\",\n            \"C\": \"L\",\n            \"I\": \"N\",\n            \"A\": \"N\"\n          },\n          \"CAPECID\": 300\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"b8835cb9-3c77-496e-ac2d-2ed6fa7f2d78\",\n        \"Name\": \"Protocol manipulation\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n          \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n        ],\n        \"AttackTechnique\": {\n          \"CVSS\": {},\n          \"CAPECID\": 272\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"573881b4-ceb6-4d6a-a5c3-9c0e6c5a3b3c\",\n        \"Name\": \"Actuator command injection\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [],\n        \"AttackTechnique\": {\n          \"CVSS\": {}\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"a76b8768-9d68-4074-b5e1-0f9abc61bcda\",\n        \"Name\": \"Sensor data manipulation\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": true,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f7639a0c-e85b-4947-bbec-2ac4a0911827\",\n          \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\",\n          \"b7935cfe-6a41-45e4-8778-f0fbb1e4018b\"\n        ],\n        \"AttackTechnique\": {\n          \"CVSS\": {}\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"30cf5142-2339-4130-8a6e-2b05869e6df2\",\n        \"Name\": \"Physical theft\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"a6a57921-7fcb-4f54-b0f5-bac0a0f74163\",\n          \"6b8c08cb-3f02-413a-96b4-179bb1f67997\"\n        ],\n        \"AttackTechnique\": {\n          \"CVSS\": {\n            \"AV\": \"L\",\n            \"AC\": \"L\",\n            \"PR\": \"N\",\n            \"UI\": \"N\",\n            \"S\": \"U\",\n            \"C\": \"N\",\n            \"I\": \"N\",\n            \"A\": \"H\",\n            \"Score\": 6.2\n          },\n          \"CAPECID\": 507\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"c7787e71-5c70-462c-9558-ce20e7cfdfe8\",\n        \"Name\": \"Selective forwarding\",\n        \"Description\": \"Selective forwarding of messages/network packets \",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f7639a0c-e85b-4947-bbec-2ac4a0911827\",\n          \"f3fe9ca9-4c34-40fc-a270-3e6252d01e6f\",\n          \"f2b91aaf-7d9f-4baf-8713-13d7625174d9\"\n        ],\n        \"AttackTechnique\": {\n          \"CVSS\": {}\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"184cd5e5-2517-4d7f-a81a-c411942d3601\",\n        \"Name\": \"Unpublished interfaces\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1,\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"AttackTechnique\": {\n          \"CVSS\": {\n            \"C\": \"H\",\n            \"Score\": 9.8,\n            \"I\": \"H\",\n            \"A\": \"H\"\n          },\n          \"CAPECID\": 36\n        },\n        \"Weakness\": {\n          \"CWEID\": 1242\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"83d23b79-71c5-488e-adb2-dd0f76d70f44\",\n        \"Name\": \"Firmware modification\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": true,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"AttackTechnique\": {\n          \"CVSS\": {\n            \"A\": \"H\",\n            \"Score\": 9.8,\n            \"I\": \"H\",\n            \"C\": \"H\"\n          },\n          \"CAPECID\": 165\n        },\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"afd4bceb-31b0-41cd-9eae-02d2eba6b41c\",\n        \"Name\": \"Insufficient logging\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c17cbe5c-3210-42fc-be1e-05f1f915865b\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 778\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"f170308a-c188-4ae0-bcef-d04af1e429b3\",\n        \"Name\": \"Mutable Root of Trust\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 1326\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"cf63f187-4353-4bf8-bc37-a7392c6d91bf\",\n        \"Name\": \"TOCTOU attack\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1,\n          2\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n          \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"AttackTechnique\": {\n          \"CVSS\": {\n            \"A\": \"H\",\n            \"Score\": 9.8,\n            \"I\": \"H\",\n            \"C\": \"H\"\n          },\n          \"CAPECID\": 29\n        },\n        \"Weakness\": {\n          \"CWEID\": 367\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"ffd6083b-7183-472c-b250-15b0de223735\",\n        \"Name\": \"Password sharing\",\n        \"Description\": \"Users/Employees share the password, e.g. using a note next to the device.\",\n        \"OriginTypes\": [],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": true,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"66c5f951-6286-4b22-a71a-ee4d6232f689\",\n        \"Name\": \"Incorrect default permissions\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"4f5e6bf4-c9c4-4ea6-9b0e-5c861570e6ec\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 276\n        }\n      },\n      {\n        \"ID\": \"eab94c5b-f7e8-4b2a-9ffb-658aefc8f0d0\",\n        \"Name\": \"Insufficiently protected credentials\",\n        \"Description\": \"\",\n        \"OriginTypes\": [\n          1\n        ],\n        \"ThreatIntroduced\": {\n          \"C\": false,\n          \"I\": true,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": false,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"ThreatExploited\": {\n          \"C\": false,\n          \"I\": false,\n          \"P\": false,\n          \"D\": false,\n          \"S\": false,\n          \"O\": true,\n          \"U\": false,\n          \"M\": false,\n          \"E\": false\n        },\n        \"threatCategorieIDs\": [\n          \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n          \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n        ],\n        \"Weakness\": {\n          \"CWEID\": 522\n        },\n        \"Severity\": 3\n      }\n    ],\n    \"threatQuestions\": [\n      {\n        \"ID\": \"5e4b4f24-6c61-4f68-ad6f-4bbce2240a36\",\n        \"Name\": \"Updatable\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n        \"Question\": \"Does the device provide the ability to update or patch the firmware?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"367b80cd-1b41-483b-a157-b143714b8af7\"\n      },\n      {\n        \"ID\": \"04f0bcc3-540b-462a-985b-e327acaed25d\",\n        \"Name\": \"Risky cryptographic algorithm \",\n        \"Description\": \"No use of custom encryption schemes, deprecated algorithms (DES, MD5, SHA1, etc.)\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n        \"Question\": \"Does the device use only secure, standardized, and approved cryptographic algorithms?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"783c742d-ebbf-4a58-b8c9-bdc0faeff57d\"\n      },\n      {\n        \"ID\": \"f56819e0-d966-4cd7-a514-8c3f944e176c\",\n        \"Name\": \"Improper access control\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"2d746c06-a57d-41af-9712-f9d8059425eb\",\n        \"Question\": \"Does the device implement and correctly perform access control on physical debug/test interfaces to check users' authorization? \",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"f40ce61a-c823-4ca7-ab51-a70dbd9718a6\"\n      },\n      {\n        \"ID\": \"bf172d28-de23-4b6f-b308-1d919e9f35a1\",\n        \"Name\": \"Internal assets exposed\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"2d746c06-a57d-41af-9712-f9d8059425eb\",\n        \"Question\": \"[Has access control] Does the device, supporting multiple debug access levels, assign the right access level to internal assets?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"517b62dd-eea7-426e-82c6-2c458eed0aaf\"\n      },\n      {\n        \"ID\": \"d0c8f335-4df1-4719-ad49-ac60573cc59d\",\n        \"Name\": \"Hardware Feature Restriction\",\n        \"Description\": \"Hardware functionality can be used to modify the memory or to observe physical side channels.\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"6c83ccbc-ffbd-4bd6-b207-07386e3393c5\",\n        \"Question\": \"Does the device restrict access to software-controllable device functionality (e.g. power and clock management)?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"4d88ce07-2a06-4ae3-942a-46eb25ccdd9b\"\n      },\n      {\n        \"ID\": \"835439f8-ce55-4a20-a448-4c2f62097869\",\n        \"Name\": \"Address Region Overlap\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"ea189855-6883-489f-a3d0-77d4ac51a6ef\",\n        \"Question\": \"Does the device allow overlapping of address regions (possibly leading to bypassing of memory protection)?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"ca6a9224-153b-4c06-8c1b-4ea3333c8e92\"\n      },\n      {\n        \"ID\": \"9736c676-6bb8-4fb9-beae-9213ac40d95b\",\n        \"Name\": \"State Transition\",\n        \"Description\": \"E.g., an uncleared SRAM can expose information after a software reset.\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"ea189855-6883-489f-a3d0-77d4ac51a6ef\",\n        \"Question\": \"Does the device clear sensitive information when a power or debug state transition is performed?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"16ab50f4-dd94-43dd-8480-37cae5c61043\"\n      },\n      {\n        \"ID\": \"0e873bd5-6e22-4a7d-82dd-98851bd9264e\",\n        \"Name\": \"Missing secure boot\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n        \"Question\": \"Does the device implement a secure boot?\",\n        \"propertyID\": \"4f0c5fb9-e24f-487a-b192-66d10c2b97a5\"\n      },\n      {\n        \"ID\": \"9b600522-8621-4f50-b71c-856efeb246cc\",\n        \"Name\": \"Missing immutable Root Of Trust\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n        \"Question\": \"Does the device has a immutable Root Of Trust in hardware?\",\n        \"propertyID\": \"17b59f51-59d3-4a8f-9960-a04ce7e96be6\"\n      },\n      {\n        \"ID\": \"ca231237-0565-407d-a5f3-0f77f80a3c50\",\n        \"Name\": \"Improper boot order\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n        \"Question\": \"Does the device boot the next stage only after the successful boot of the previous stage? \",\n        \"propertyID\": \"eb678bc0-3ece-4937-bba3-03981c5759a4\"\n      },\n      {\n        \"ID\": \"abc4b5fe-d936-41c8-9a8f-57c72c9bc3e1\",\n        \"Name\": \"TOCTOU attack\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n        \"Question\": \"Is code checked for validity and trust immediately before running the code (to reduce Time of Check to Time of Use attacks)?\",\n        \"propertyID\": \"f3697413-e4de-4572-90b1-8041e8ff9b67\"\n      },\n      {\n        \"ID\": \"8ac90b2d-7494-47de-8cc9-7ccb6d627bd8\",\n        \"Name\": \"Boot Code Protection in RAM\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n        \"Question\": \"Does the device protect boot code (from ROM) during execution in a volatile memory?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"885834f4-b8b6-485b-8690-6ac525dbb59d\"\n      },\n      {\n        \"ID\": \"0e71f794-64d0-4aca-bbfd-3cc3593b8b5b\",\n        \"Name\": \"Less-secure downgrade\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n        \"Question\": \"Does the device's TLS version and configuration exclude less-secure algorithms? \",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"56a10ad5-a9bf-426f-8e83-ba07561ca78b\"\n      },\n      {\n        \"ID\": \"b7546823-207e-4dcd-a65f-75be3f1e8d4f\",\n        \"Name\": \"Weak block cipher mode\",\n        \"Description\": \"Deprecated block cipher modes, such as ECB or CBC, do not provide enough security.\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n        \"Question\": \"For symmetric algorithms using block ciphers, does the device use strong block cipher modes?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"518bbb50-aeee-4c87-95d1-8724a4dac569\"\n      },\n      {\n        \"ID\": \"e8a6964f-fe95-49b9-8d5a-c1914691bb17\",\n        \"Name\": \"Appropriate parameters\",\n        \"Description\": \"For example, the encryption scheme may be good, but its parameters are not sufficient (AES-128 vs AES-256, ECC secp256 vs secp384).\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n        \"Question\": \"Does the device use up-to-date and appropriate parameters for cryptographic primitives?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"08377961-8f56-4b56-b684-331f77810f1d\"\n      },\n      {\n        \"ID\": \"3519bc83-7b2b-4116-82fd-66a5b20479a0\",\n        \"Name\": \"Sufficient entropy\",\n        \"Description\": \"A strong source of entropy could be a True Random Number Generator (TRNG), human input, etc?\\\\nThe entropy is required for generating true random numbers or to use it as seed for a Cryptographically Secure RNG.\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n        \"Question\": \"Does the device provide a strong source of entropy?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"420f03a2-1ab7-4bc2-910d-4ea025518da2\"\n      },\n      {\n        \"ID\": \"eca78a13-9d1c-47b1-8244-a4e2995ad0d6\",\n        \"Name\": \"Nonce reuse\",\n        \"Description\": \"IVs and nonces that are required by many cryptographic algorithms must be used only once and must be generated with high entropy, which is usually ensured by a true random number generator.\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n        \"Question\": \"Does the device use values for initialization vectors (IV) or nonces only once? \",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"f35ccff8-6497-4b28-8627-7f255bce0e02\"\n      },\n      {\n        \"ID\": \"1f2d06c2-db63-4016-b138-417122111a2d\",\n        \"Name\": \"Roll-back\",\n        \"Description\": \"For practical reasons a downgrade is probably necessary, but security patches should not be reversible (e.g. by using special security version numbers).\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n        \"Question\": \"Does the device prevent a firmware downgrade (roll-back) to vulnerable versions?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"d951b792-f84b-4ab3-82d1-21867e202755\"\n      },\n      {\n        \"ID\": \"ca8aa7ce-e87c-4468-be08-faf66bca1696\",\n        \"Name\": \"Hard-coded credentials\",\n        \"Description\": \"For example, does the software or hardware include fixed strings/keys for developer authentication (backdoor)?\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n        \"Question\": \"Does the device use/contain hard-coded credentials? \",\n        \"propertyID\": \"e1e92ae3-ee61-4cae-bfb5-be18e97ea587\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        }\n      },\n      {\n        \"ID\": \"956f9950-0d28-4e4c-8831-8a99030ccafc\",\n        \"Name\": \"Default credentials\",\n        \"Description\": \"A common vulnerability are default credentials that can be found in the manual.\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n        \"Question\": \"Does the device ship with default credentials?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"714ed1de-855c-491b-8a08-745a99e17413\"\n      },\n      {\n        \"ID\": \"4c4a1184-5a53-41dd-8aba-3acb663f3b6b\",\n        \"Name\": \"Password requirements\",\n        \"Description\": \"Requirements to length, reuse, common passwords, expiration, etc?\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n        \"Question\": \"Does the device enforce requirements to passwords?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"540e39da-3227-4e6c-86ea-32a017318511\"\n      },\n      {\n        \"ID\": \"a64b3c96-c3d2-4976-a606-ae97652e2fa5\",\n        \"Name\": \"Multi-factor authentication\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n        \"Question\": \"Does the device support multi-factor authentication?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"88763e20-7878-4525-81d8-c4d09b867042\"\n      },\n      {\n        \"ID\": \"7aa200ee-17f1-4092-b6f9-7ef87c96dfb8\",\n        \"Name\": \"Restriction of attempts\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n        \"Question\": \"Does the device restrict failed authentication attempts within a short time frame?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"aa74f499-b995-4f5e-8d92-91f3ca172743\"\n      },\n      {\n        \"ID\": \"20146e1b-2de2-4b76-8482-7931a46f6090\",\n        \"Name\": \"Sensitive (authentication) information exposed\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n        \"Question\": \"Does an authentication response contain information which requirement is not fulfilled (e.g. password/username is wrong)? \",\n        \"propertyID\": \"157fd588-2ea2-4260-9a25-86bf8241b31c\"\n      },\n      {\n        \"ID\": \"7a53e800-1166-466e-a5da-e7cbb1f53942\",\n        \"Name\": \"Session ID expiration\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n        \"Question\": \"Does the device invalidate session identifiers (e.g. session ID) after a logout?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"51473250-3891-4342-a8b8-687db16ffef3\"\n      },\n      {\n        \"ID\": \"46d4d08b-030e-41ce-b14e-eb6deb5140d5\",\n        \"Name\": \"Session timeout\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n        \"Question\": \"Does the device invalidate a session after a period of inactivity?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"a21a6894-256f-4bfd-bd49-09352d054399\"\n      },\n      {\n        \"ID\": \"b554922b-d912-427a-b1c9-e3da880038e1\",\n        \"Name\": \"Password recovery\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n        \"Question\": \"Does the device implement a strong mechanism for password recovery after users forgot it?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"a9b6390d-0145-4e0f-8420-8a9b8f728c3d\"\n      },\n      {\n        \"ID\": \"b22c80f8-01f7-491c-bb96-f76777bffa8f\",\n        \"Name\": \"Client-side hashing\",\n        \"Description\": \"\",\n        \"OptionType\": 1,\n        \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n        \"Question\": \"Does the device use a password hash instead of password for authentication (client-side password hashing)?\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"propertyID\": \"ba8dc5f0-e1a9-4263-8179-747791b873ee\"\n      },\n      {\n        \"ID\": \"ea4835f4-d40f-435b-b75c-e9e616f8337f\",\n        \"Name\": \"Hidden interfaces\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"2d746c06-a57d-41af-9712-f9d8059425eb\",\n        \"Question\": \"Are the hidden interfaces that developers created with the intend to be not publicly available?\",\n        \"propertyID\": \"311904f3-7898-4bab-ba74-e6024c704cd3\"\n      },\n      {\n        \"ID\": \"051f0ffa-a58b-4b1b-bd19-2f46b03417af\",\n        \"Name\": \"Integrity validation\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n        \"Question\": \"Does the update routine cryptographically validate the integrity of a software update package before the installation begins?\",\n        \"propertyID\": \"8f47a4ac-0934-4a65-a6f3-07503c92f658\"\n      },\n      {\n        \"ID\": \"181a48c3-9e33-4620-b8eb-de8877caf188\",\n        \"Name\": \"Authenticity validation\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n        \"Question\": \"Does the update routine cryptographically validate the authenticity of a software update package before the installation begins?\",\n        \"propertyID\": \"00f961fc-97ce-4003-8f2e-79a4748ec0b2\"\n      },\n      {\n        \"ID\": \"04f1e766-95b6-4b93-9032-337ae1febdb9\",\n        \"Name\": \"TOCTOU attack\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n        \"Question\": \"Does the device ensure that the package cannot be modified or replaced by an attacker between being validated and installed - a TOCTOU (Time of Check to Time of Use) attack?\",\n        \"propertyID\": \"000441ff-d15f-46c3-bb9c-0c949063271d\"\n      },\n      {\n        \"ID\": \"75207b21-020d-4011-9d6e-9cba7f311ac7\",\n        \"Name\": \"Unknown state\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n        \"Question\": \"Does the device implement a fail safe mechanism that will leave the system in a known safe state in the event of a failed update?\",\n        \"propertyID\": \"3df6a845-52a2-40a9-8978-0277efd7cfcb\"\n      },\n      {\n        \"ID\": \"52f64789-fac1-47f7-927c-e2c33ca4567a\",\n        \"Name\": \"Improper log access control\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Is access to log files restricted to the minimum required rights to function properly?\",\n        \"propertyID\": \"8e4b2af8-b023-4991-80f5-54ffa28cd616\"\n      },\n      {\n        \"ID\": \"0d4af18b-a202-44e5-b8a8-84c8ed7c6576\",\n        \"Name\": \"Missing separate location for log files\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Are logs stored in their own partition, separate from other system files?\",\n        \"propertyID\": \"418fe90d-88fd-4066-9339-890501ea07f0\"\n      },\n      {\n        \"ID\": \"2c3b6a86-04c2-4774-8fed-84178460bd05\",\n        \"Name\": \"Missing log rotation\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Is there a maximum size for logs and is log rotating implemented?\",\n        \"propertyID\": \"d0532ce9-51a9-4bb1-84ae-c8c63ee78e7f\"\n      },\n      {\n        \"ID\": \"d6d5e1bd-d8c2-4b0c-b85a-b7cd2c9190ed\",\n        \"Name\": \"Missing log evaluation\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Are logs regularly monitored and analyzed to extract valuable information and insight?\",\n        \"propertyID\": \"364003cb-3e6c-470a-a6bf-e7a7c93e07fa\"\n      },\n      {\n        \"ID\": \"fe03b451-3259-4649-963f-569e6f2f426a\",\n        \"Name\": \"Regulation compliance\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Do all logged data comply with prevailing data protection regulations?\",\n        \"propertyID\": \"4006de15-8767-4a09-8678-84b8d6b50ae0\"\n      },\n      {\n        \"ID\": \"bcebb419-09f6-41b8-83b3-88923dcac369\",\n        \"Name\": \"Missing central log backup\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Does the device securely send logs to a central repository? \",\n        \"propertyID\": \"bd32d10e-82d6-4e7f-9247-fe2753908e60\"\n      },\n      {\n        \"ID\": \"9c9cdd06-f272-4a71-b83e-ad1d2cf0e9a8\",\n        \"Name\": \"Log files contain passwords\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Does the device log passwords?\",\n        \"propertyID\": \"025e828e-d1a0-4487-9c56-09fd6941d4b9\"\n      },\n      {\n        \"ID\": \"65b66adb-05b4-440b-a9e5-30a615ac4e6f\",\n        \"Name\": \"Missing log entry\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Are authentication attempts logged?\",\n        \"propertyID\": \"c7d5fd7a-4007-480c-a34b-cb32fab17472\"\n      },\n      {\n        \"ID\": \"30c55017-8b6b-4b0b-a591-ddf03e86ee37\",\n        \"Name\": \"Missing log entry\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Are user login, logout, and inactivity logged?\",\n        \"propertyID\": \"a154298a-d410-4da4-921d-906165cd5329\"\n      },\n      {\n        \"ID\": \"eb07bd86-e1cf-4177-9531-4622c14e0997\",\n        \"Name\": \"Missing log entry\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Are privilege changes logged?\",\n        \"propertyID\": \"c86b6500-99cb-46e3-948f-b67b69c9768d\"\n      },\n      {\n        \"ID\": \"6bf25a01-2d7e-4f4c-bd18-983b839560bc\",\n        \"Name\": \"Missing log entry\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Are user management changes logged?\",\n        \"propertyID\": \"1a582358-45c2-42e2-a21e-61206a4eda7e\"\n      },\n      {\n        \"ID\": \"5a2d72ab-1079-4e09-8ded-18f4c1efcf29\",\n        \"Name\": \"Missing log entry\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Are changes to the firmware logged?\",\n        \"propertyID\": \"91abf825-cfca-4386-b5d5-8262423b090d\"\n      },\n      {\n        \"ID\": \"03c2354d-f29f-4e56-ad13-8b996b7a0c8a\",\n        \"Name\": \"Missing public policy\",\n        \"Description\": \"The policy can be provided either in-house or through a third party.\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n        \"Question\": \"Is there are publicly available vulnerability disclosure policy?\",\n        \"propertyID\": \"0c7bdef9-6b56-42db-a22b-a460b08bb27d\"\n      },\n      {\n        \"ID\": \"591d70ce-8b09-4beb-807a-7b9801e42ec2\",\n        \"Name\": \"Missing /security page\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n        \"Question\": \"Does the website of the manufacturer use /security to provide security-related topics?\",\n        \"propertyID\": \"36e1de4b-5129-470f-b06d-208ef7610da8\"\n      },\n      {\n        \"ID\": \"1fff723c-b343-432b-a7e1-b5b7780bad03\",\n        \"Name\": \"Missing security.txt\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n        \"Question\": \"Does the website of the manufacturer provide a security.txt including all security-related sites and contact information?\",\n        \"propertyID\": \"3affc4da-9a78-43ec-990b-75d20edbc410\"\n      },\n      {\n        \"ID\": \"aa359dc1-5ac3-469a-b61c-ce910221acdc\",\n        \"Name\": \"Missing contact email address\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n        \"Question\": \"Does the manufacturer provide an email account for security related topics?\",\n        \"propertyID\": \"d94f2535-73f9-4c2d-aef1-57b1c9daaa5c\"\n      },\n      {\n        \"ID\": \"b089383b-9c6b-46ac-b255-59da1c622afe\",\n        \"Name\": \"Missing PGP key\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n        \"Question\": \"Does the manufacturer provide a PGP on their website for secure communication?\",\n        \"propertyID\": \"61d4b9c9-19a9-431e-b114-f2c04b48846b\"\n      },\n      {\n        \"ID\": \"8b63f920-3f9c-4a00-afba-7b3d328bfd56\",\n        \"Name\": \"Missing reporting system\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n        \"Question\": \"Is there a public vulnerability reporting system?\",\n        \"propertyID\": \"23943ca9-3df9-4d69-a414-6d8fef99d30c\"\n      },\n      {\n        \"ID\": \"45134e98-27a6-4345-b5d2-1584920f9fa4\",\n        \"Name\": \"Missing timeline info\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"25032887-439e-4599-84bf-05d906641a0b\",\n        \"Question\": \"Is there information on the timelines for acknowledgement and resolution of reported issues?\",\n        \"propertyID\": \"e7d90cc4-822e-4aab-a161-c766cf13df22\"\n      },\n      {\n        \"ID\": \"f60997da-93c7-4b86-8ade-c6a8fa03cded\",\n        \"Name\": \"Missing bug bounty program\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"25032887-439e-4599-84bf-05d906641a0b\",\n        \"Question\": \"Is there a bug bounty program?\",\n        \"propertyID\": \"b4c47f35-bcd3-4b18-9b35-8a7f213dcca4\"\n      },\n      {\n        \"ID\": \"9a672303-34ad-48df-9ca0-11c64f057707\",\n        \"Name\": \"Non-disclosure\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"25032887-439e-4599-84bf-05d906641a0b\",\n        \"Question\": \"Does the manufacturer enable a coordinated vulnerability disclosure?\",\n        \"propertyID\": \"dd2c4c41-45f0-4105-aea4-317943e2f435\"\n      },\n      {\n        \"ID\": \"81a26318-6836-4280-a146-dbbd515733f2\",\n        \"Name\": \"Missing Firmware Encryption\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n        \"Question\": \"Is the firmware update encrypted?\",\n        \"propertyID\": \"434d79b2-574c-4575-813b-19ec7854a139\"\n      },\n      {\n        \"ID\": \"f797f4ac-1e25-4463-b77c-1a90e7ccdc6a\",\n        \"Name\": \"Unnecessary components\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n        \"Question\": \"Does the operating system only include components (libraries, modules, packages, ...) that are required to support the function of the device?\",\n        \"propertyID\": \"a7e3fa91-ce20-42b3-8e35-e0188ca1ac50\"\n      },\n      {\n        \"ID\": \"6f7a6386-8b2f-42cc-9433-8f8963362f66\",\n        \"Name\": \"Outdated OS version\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n        \"Question\": \"Is the OS the latest available stable version?\",\n        \"propertyID\": \"4ba05121-485a-40eb-832a-f4095c7b88df\"\n      },\n      {\n        \"ID\": \"d8245144-c203-40b8-8d62-ac822810381d\",\n        \"Name\": \"Secure configuration not default\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n        \"Question\": \"Does the device ship with the most secure configuration in place (security by default)?\",\n        \"propertyID\": \"41b3d476-6ff9-40d7-ad5b-c5d5fad4cda1\"\n      },\n      {\n        \"ID\": \"a5b98b6e-be51-47ca-aeb8-975a5669d590\",\n        \"Name\": \"Missing component update process\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n        \"Question\": \"Is there a process to update OS components to the latest stable version throughout the lifetime of a deployed device?\",\n        \"propertyID\": \"36ed4680-0b94-42a9-9863-08eb976c9ebc\"\n      },\n      {\n        \"ID\": \"c8caecc4-6cc7-4e60-9013-b7e4ef16a3c2\",\n        \"Name\": \"Activated services and ports\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n        \"Question\": \"Are all ports, protocols, and services that are not used deactivated?\",\n        \"propertyID\": \"fb3b36de-11b3-4e5d-9c9c-4dcfab666da6\"\n      },\n      {\n        \"ID\": \"6a468670-eb0a-416d-9e22-bac4fa377463\",\n        \"Name\": \"Improper permission configuration\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n        \"Question\": \"Is the access to the root file system restricted for users/applications?\",\n        \"propertyID\": \"c93fbf95-01d7-45fb-a786-0eb926e6dc2c\"\n      },\n      {\n        \"ID\": \"d3df84cb-3ee1-4b90-9bdd-fa33d67ff0d0\",\n        \"Name\": \"Least privilege violation\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n        \"Question\": \"Have all files and directories the minimum required access rights (least privilege principal)?\",\n        \"propertyID\": \"7378780b-e280-4494-84f2-0beb4e7257ec\"\n      },\n      {\n        \"ID\": \"e4a8a85e-77e2-41d5-85aa-1210083b4f6a\",\n        \"Name\": \"Missing file system encryption\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n        \"Question\": \"Is the file system encrypted?\",\n        \"propertyID\": \"85e19877-51a0-4904-8e98-b2fb14be3922\"\n      },\n      {\n        \"ID\": \"d1ed0929-25af-4c4f-9cbf-228d0a235e26\",\n        \"Name\": \"Least privilege violation\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"2ca79dc4-0a73-4fc2-859b-1b5701530183\",\n        \"Question\": \"Does the application operate at the lowest privilege level that is possible, with access only to resources needed (least privilege principal)?\",\n        \"propertyID\": \"03d7ff9f-bbdc-4938-974d-cd9766bdb8e0\"\n      },\n      {\n        \"ID\": \"333ea9fb-0f19-462d-a7af-0f15322b878c\",\n        \"Name\": \"Missing application isolation\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"2ca79dc4-0a73-4fc2-859b-1b5701530183\",\n        \"Question\": \"Is the application isolated from others, e.g. using sandboxing techniques such as virtual machines, containerisation, or hardware mechansims?  \",\n        \"propertyID\": \"532fc4c6-b14f-4b9a-b033-f4aaf0d63e25\"\n      },\n      {\n        \"ID\": \"2f0371b7-d68e-4ee7-ac59-2f2ee0b8bcf6\",\n        \"Name\": \"Improper input validation\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"2ca79dc4-0a73-4fc2-859b-1b5701530183\",\n        \"Question\": \"Is all data input sanitized and validated before processing?\",\n        \"propertyID\": \"1c1a93cf-acce-4f57-a210-e0b5058f57b8\"\n      },\n      {\n        \"ID\": \"50c49be8-97f0-42f3-816e-94bea0b35d02\",\n        \"Name\": \"Keys not stored in security module\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n        \"Question\": \"Are keys stored in a cryptographic vault, such as a trusted platform module (TPM), secure element (SE), or hardware security module (HSM)? \",\n        \"propertyID\": \"64bb2754-a187-47c8-aa93-e599f0a97a57\"\n      },\n      {\n        \"ID\": \"3a5c0215-3d89-429a-8cff-becff1a625f3\",\n        \"Name\": \"Missing key encryption\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n        \"Question\": \"Are keys encrypted using a key encryption key (KEK)? \",\n        \"propertyID\": \"b6c0efb3-7db3-4dd8-8c60-620027eefa3e\"\n      },\n      {\n        \"ID\": \"3bd6ada0-7f40-4b6a-83cf-502b1eb1a9a5\",\n        \"Name\": \"Key usage in untrusted environment\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n        \"Question\": \"Are cryptographic operations (such as key access, encryption, and signing) executed in a trusted environment (e.g. separate module)?\",\n        \"propertyID\": \"b43ada71-51c6-4f5e-b310-a1735a41e602\"\n      },\n      {\n        \"ID\": \"575c4c06-6b6f-4982-8f57-d0cf074d0cc9\",\n        \"Name\": \"Missing tamper resistant unique ID\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"44545d3e-fa0a-44c7-a19e-8164dab646dc\",\n        \"Question\": \"Is the device uniquely identifiable (the ID is factory-set and tamper resistant stored in hardware)?\",\n        \"propertyID\": \"08ee42e8-3525-4767-98e3-f7492f356d2f\"\n      },\n      {\n        \"ID\": \"e3f323c6-a0f4-46bb-ba3b-418970e02d7c\",\n        \"Name\": \"Missing unique user identification\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"7e64d98b-ecbe-4921-9545-8b30d0f9bde8\",\n        \"Question\": \"Are users identified by a unique identifier? \",\n        \"propertyID\": \"6391f8f2-eb04-4caf-b490-49c920315867\"\n      },\n      {\n        \"ID\": \"207a9b2c-de5c-48a0-9e60-d55de9b13cb3\",\n        \"Name\": \"Missing privilege differentiation\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"7e64d98b-ecbe-4921-9545-8b30d0f9bde8\",\n        \"Question\": \"Is it possible to assign different privileges to users?\",\n        \"propertyID\": \"cdb65d33-946e-412e-838b-3075e928c4f0\"\n      },\n      {\n        \"ID\": \"4ecc4eda-a2e0-4d3e-8bcc-9a606acb2d84\",\n        \"Name\": \"Improper password storage\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"7e64d98b-ecbe-4921-9545-8b30d0f9bde8\",\n        \"Question\": \"Are passwords stored properly (using a cryptographic hash function along with a unique unpredictable salt)?\",\n        \"propertyID\": \"984400a6-7bd6-4031-a40c-06f0499e0d86\"\n      },\n      {\n        \"ID\": \"ab722480-937d-4b08-98ec-fa7898115e4e\",\n        \"Name\": \"Missing certificate chain verification\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n        \"Question\": \"Is the entire certificate chain validated before trusting a certificate?\",\n        \"propertyID\": \"20b12b0e-4031-4eb3-ad39-f91489884490\"\n      },\n      {\n        \"ID\": \"5670d86c-cde0-4655-880b-8c5338b97ca2\",\n        \"Name\": \"Certificate expiration\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n        \"Question\": \"Is there a secure and reliable way to update certificates?\",\n        \"propertyID\": \"e09bd987-fbf4-4f3d-afeb-033e5bdcb7f8\"\n      },\n      {\n        \"ID\": \"5009ecdf-c775-40ff-88a4-842d4750ab8c\",\n        \"Name\": \"Revoked certificate\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n        \"Question\": \"Is it possible to revoke a certificate / check a certificate against a revocation list?\",\n        \"propertyID\": \"c9d634b6-7eb8-4210-9e97-58e93a5c09a0\"\n      },\n      {\n        \"ID\": \"70a2fe78-06b8-4635-8c04-62d2eff0b793\",\n        \"Name\": \"Uncleared user data\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"7e64d98b-ecbe-4921-9545-8b30d0f9bde8\",\n        \"Question\": \"Does a factory reset remove all user data/credentials stored on the device?\",\n        \"propertyID\": \"e6ee6f25-6e52-4f43-93c4-7ef35eb97024\"\n      },\n      {\n        \"ID\": \"24dbb5ec-273d-4b9d-be56-c61c06f6d907\",\n        \"Name\": \"Unhandled exceptions\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"9926788f-c85e-43ca-91e4-aa9c0f46656e\",\n        \"Question\": \"Can unhandled exceptions occur?\",\n        \"propertyID\": \"897ef1fd-f1e7-4527-89e3-2cdaf2c8644a\"\n      },\n      {\n        \"ID\": \"36e20d86-a97e-4f58-bded-6fabd6455ca2\",\n        \"Name\": \"Sensitive (error) information exposed \",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"9926788f-c85e-43ca-91e4-aa9c0f46656e\",\n        \"Question\": \"Do error messages reveal details about the internal state (e.g. stack information, path, passwords)?\",\n        \"propertyID\": \"f7733c50-2529-459f-9397-8d06f231121c\"\n      },\n      {\n        \"ID\": \"d8b6dea3-2785-47f9-8a49-f77031620844\",\n        \"Name\": \"Missing log entry\",\n        \"Description\": \"\",\n        \"ChangesPerOption\": {\n          \"general.Yes\": {\n            \"Active\": true,\n            \"Value\": true\n          },\n          \"general.No\": {\n            \"Active\": true,\n            \"Value\": false\n          },\n          \"general.N/A\": {\n            \"Active\": false\n          }\n        },\n        \"OptionType\": 1,\n        \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n        \"Question\": \"Are configuration changes logged?\",\n        \"propertyID\": \"0bd863c2-5505-4226-9b28-bab9715c99d1\"\n      }\n    ],\n    \"threatRuleGroups\": [\n      {\n        \"ID\": \"dc027a7a-9824-4b6a-befb-cc68270f2ecb\",\n        \"Name\": \"Stencil Rules\",\n        \"Description\": \"\",\n        \"threatRuleGroupIDs\": [],\n        \"threatRuleIDs\": [\n          \"48cd5ba9-d234-442e-aebb-0011005f806d\",\n          \"cb3d7440-5d0f-482a-93cb-5ae9c625e31d\",\n          \"3459508a-9169-41ce-8e3a-6ea968023a3a\",\n          \"821594a6-02e5-4a15-9a72-9cca5b57ee92\",\n          \"7cfa63f6-262b-4da3-aa88-6478522b45c5\",\n          \"5c21d6b7-2390-4f72-b29e-7d7985a30293\",\n          \"18b56da2-a891-4137-a1d6-13f8b4a31d00\",\n          \"13b5172b-9d6c-49a3-9580-fb256d5cd506\",\n          \"ddfef636-378c-4874-b2ea-33b0fcfe22c5\",\n          \"32dab43f-2dc8-4109-9420-ee7c118a82d5\",\n          \"4609cf84-96fa-4054-bf45-5b33993ce648\",\n          \"1d39d1b0-8f3c-40f7-bb6d-f7699b3b4b07\",\n          \"358f4f37-445a-4336-8107-c02d7b9cd3a4\",\n          \"2759171a-24e3-4bfe-8ca7-5814902a000e\",\n          \"4c58a730-0161-4385-8249-bbf603ae1b88\",\n          \"af1cd836-48c2-437c-93d0-58b7c9e1d0f6\",\n          \"09881484-9a79-427d-a638-3e894af45c13\",\n          \"5c467e46-e642-49ad-a057-4784ec792125\",\n          \"2af47360-11c3-45e3-a43f-fc3efa8f6f4d\",\n          \"53fc96a4-96a0-42cc-bb2a-fc4515b8b008\",\n          \"9846541d-9bf3-4a2e-98cb-1ad13da5648b\",\n          \"1da12d13-b7ea-4179-8c6b-b87a338d95a5\",\n          \"63fb20c8-4a32-430e-bfa4-587503eaf572\",\n          \"d0736981-7141-4d93-b493-d99135b8d236\",\n          \"2b24dfec-f29a-4682-8066-db29831234ec\",\n          \"e3a2c92b-834f-408e-a4d2-87cfc66bd9fc\",\n          \"834aa7e3-1a0b-47a8-abdc-b4b1a6705377\",\n          \"78a3949d-8677-4426-b2b1-eb20b4296821\",\n          \"12caa9f9-0b1c-4ce0-ac2b-ebee69001b1e\",\n          \"38d27f20-a7ee-40dc-aa6f-b10c98d72409\",\n          \"8597431f-52e2-4d89-bb21-7d34185dbfe6\",\n          \"b8438e31-cc77-4400-86c0-14aa01d411ae\",\n          \"fa055483-b3a2-461f-b09c-46e99de0455e\",\n          \"9ec88af2-3da9-41df-93bf-8cbcb74a7bb6\",\n          \"b41b621c-4b91-43f9-90ab-b7e955269620\",\n          \"87987695-a4ae-4a76-9eae-977592998b8c\",\n          \"d2839332-47c8-4f40-9fd9-66aa02a3615d\",\n          \"01a4663a-1bac-4d51-ac66-3f957b90d1ab\",\n          \"08043f24-cc72-435b-ace1-bd593442215d\",\n          \"e8848ea8-e120-4722-bc10-90daf7b4a075\",\n          \"0e783801-b482-4721-af49-1be96b16fc59\",\n          \"512c6921-1b40-4e26-86b5-f66609e57d96\",\n          \"6a9008d4-fa27-46b1-8a11-6dbcecb8b211\",\n          \"e5f4b790-5898-495d-9b51-5a16d452edff\",\n          \"e2529607-c1fd-472d-ad14-c7f2cc719282\"\n        ]\n      },\n      {\n        \"ID\": \"b02f311c-0bb2-4057-9dde-6225ebbf4e1b\",\n        \"Name\": \"Component Rules\",\n        \"Description\": \"\",\n        \"threatRuleGroupIDs\": [],\n        \"threatRuleIDs\": [\n          \"8ab20d5d-f624-46f5-beeb-833327d8673f\",\n          \"34b65a9d-ca44-44b0-b66f-aa5bacfc53b4\",\n          \"67919611-8ec3-4d48-bbd7-03f963d6f12c\",\n          \"5585cf20-9e87-4ae5-960a-a952b07c37e5\",\n          \"b3a678a2-87a5-42ae-a1ef-4ec599554471\",\n          \"61452452-9fdc-4023-873d-93cd6d018abb\",\n          \"dde91006-ebc4-4e9c-906b-8c3591266097\",\n          \"a100a6c5-5f38-4224-a74a-825fa89579c2\",\n          \"96876c2e-a3e9-4e0f-afd0-fe721dd0f295\",\n          \"2b389d13-5f71-4bb4-b111-a7fee2b6a486\",\n          \"61e37274-9751-4250-8a4d-6476edc8f732\",\n          \"c54de80f-b548-4432-9ec0-fa3a579be7e6\",\n          \"c6535534-7656-4819-93fe-19d9a78a9390\",\n          \"85b3711a-33d2-4cd2-9c84-471e76cc761c\",\n          \"12c8413b-e1cc-40d6-ae07-6321c5fbf4a0\",\n          \"5aac31c8-fcb7-4d27-8937-e2c9747b83d4\",\n          \"6630ce3a-e21d-467a-b669-99418e95cd8a\",\n          \"6aec11cc-995c-4ee9-a1ce-506b071f3da3\",\n          \"2ee8ccf6-2886-4ebe-81d9-46a408b553a3\",\n          \"f46ae96c-b62c-4fda-955d-6ed55c157c7f\",\n          \"dfac545d-b449-45d0-95bd-a7814b1a97ce\",\n          \"4e5318de-8259-41cd-8704-8842a959b9c6\",\n          \"a904d935-a9d7-45d9-83c8-c403a57e0b80\",\n          \"8340469b-525d-4563-a75d-6ca1d60c7409\",\n          \"d714118d-123d-41b4-8997-63b13a5c09d4\",\n          \"90c71cb6-ec32-4eb6-95ca-20a5d7381fc6\",\n          \"cb711ade-c26b-4500-8337-4eba00d26975\",\n          \"1729c2ac-4dd2-449a-bd8a-ee7c11ff1461\",\n          \"b9caf305-7c53-48c9-beef-2fb2a96cc5b0\",\n          \"778eb19f-8f36-4ce5-aa48-70429386b113\",\n          \"c4df07d3-101f-492e-9f90-70d916f7ed43\",\n          \"b0d13562-1629-4724-bb67-f910157ed1c9\",\n          \"b4c216c0-ccab-4a4d-a156-1b4979dc2aec\",\n          \"c6ac1dcf-ff18-4810-ba64-10aaaf44c135\",\n          \"f51350c5-5401-4276-a8e5-14eba86bc070\",\n          \"e145ffad-ec47-4251-9fa4-1475133db2ff\",\n          \"cf4a11cf-4dee-46ef-8c68-48b5dced2de0\",\n          \"c46dc641-6f0f-4e80-9b80-3833f6c4f2c0\",\n          \"19f1cf08-5ab0-419c-9d56-b5d4d1fc6e24\",\n          \"370351b8-cef2-43bf-89f2-324a814e00a3\",\n          \"df78de64-d35e-474f-be3b-260f60a13fc6\",\n          \"ebf9833c-733d-4356-b390-e754096d0da8\",\n          \"543e017c-8bc2-444e-a3fb-d1dbd52ae21b\",\n          \"a68571c4-61b7-4a33-b5d9-104ef2c06ed0\",\n          \"4f2b98fa-8173-411d-a9b9-2cb0fb31fbde\",\n          \"96661040-05b5-436b-887a-f7864419d691\",\n          \"96208355-0119-41f4-9b93-b0a5781e9ae1\",\n          \"dfc187d5-8287-4c8e-99bc-09cc3e26e201\",\n          \"49344c1a-2368-4a01-a366-023707d0b354\",\n          \"b640f7fb-fb76-4de9-bcf2-0883807f58da\",\n          \"efd73610-90fd-406a-9139-82ff0552bc43\",\n          \"8886f368-618b-4520-a7f5-1db3141da66b\",\n          \"16f2c70d-1752-4e7a-b1ac-5f95710c2778\",\n          \"019f2476-ceca-47ab-b19e-9c2077cc35fe\",\n          \"11975f59-55e0-420f-9366-513175e9236e\",\n          \"1487298b-ff88-4e01-9a60-09b1eaf8a41f\",\n          \"10a258f6-49c0-435e-9a66-630039de0dc8\",\n          \"5d407978-73dc-45c9-8402-db692b42dae4\",\n          \"568a6a24-9109-4f93-b3b3-d3754260387e\",\n          \"5d59dab8-ca08-4359-8e7d-284dcde6d4b7\",\n          \"de96008b-1c59-4319-9b5c-4f5a7e97a122\",\n          \"337c4826-08ed-4c40-9542-54f08317ddb0\",\n          \"eac955da-c90f-4ca8-a1c1-bc186f7f0ad2\",\n          \"1267c02f-4adf-4086-9a9b-c5cc0f81c709\",\n          \"a529a0c3-a98e-41be-80f5-84b876ddddc6\",\n          \"b41315d4-f62d-4133-9a38-be8097a66ebb\",\n          \"50864039-1856-432a-9ff2-0acf3cccd644\",\n          \"d17d5929-ebcd-4c2c-95b6-f7c8ab4c5538\",\n          \"cffa8a3a-ec5b-4e2c-b118-80741e1c8e2a\",\n          \"8bab4292-bca9-4701-8141-a62fc2b2cded\",\n          \"ab8ff926-1147-4597-bded-42fbfb71edb2\",\n          \"135275c4-5523-4a95-a466-47947930377a\",\n          \"dbf5eca4-f98b-443d-b9a1-8113fafc962e\",\n          \"85519ed2-313e-4c85-85fd-f89109f845d4\",\n          \"871318c9-4e0c-4ff4-a475-06195ea4e3bb\",\n          \"bf9e6225-fb28-429a-84f1-fe3be63c3d95\"\n        ]\n      },\n      {\n        \"ID\": \"1d995fc2-d7a5-4f46-ae16-954b8603b7fe\",\n        \"Name\": \"CPDFD Rules\",\n        \"Description\": \"\",\n        \"threatRuleGroupIDs\": [\n          \"cf6ecec7-3ece-4371-b6cc-976a435023ee\",\n          \"78cbfae0-bbd0-47a5-91ff-223518ffd7b1\",\n          \"4198e708-4e70-41f4-9466-dfc4cc171bfc\",\n          \"27b2bc15-e19c-452e-b096-4f910810e42f\",\n          \"5d6a6968-e654-4080-91f2-a0755ae8f9e0\"\n        ],\n        \"threatRuleIDs\": []\n      },\n      {\n        \"ID\": \"cf6ecec7-3ece-4371-b6cc-976a435023ee\",\n        \"Name\": \"Basic Network Attacks\",\n        \"Description\": \"\",\n        \"threatRuleGroupIDs\": [],\n        \"threatRuleIDs\": [\n          \"8b527d06-5d08-41c1-91fc-1c4146858987\",\n          \"da0924b8-967c-406e-a2f5-a6ebac21de1d\",\n          \"b8e6349e-a52a-4f15-a349-312fc809fbb8\",\n          \"7b825bd7-222e-476f-bf22-85fe2e50eb6c\",\n          \"32d4322f-482d-4a59-8f62-964ef8014a0b\"\n        ]\n      },\n      {\n        \"ID\": \"5d6a6968-e654-4080-91f2-a0755ae8f9e0\",\n        \"Name\": \"STRIDE per Interaction\",\n        \"Description\": \"According to Adam Shostack: Threat Modeling - Designing for Security\",\n        \"threatRuleGroupIDs\": [],\n        \"threatRuleIDs\": [\n          \"29d9866c-8a0b-4443-ada2-116171c608f9\",\n          \"5bf95fe6-cca1-45f5-932a-454b16120983\",\n          \"950ae971-fb79-4df0-8df7-0ce1135ff194\",\n          \"6f361cd2-f478-4dad-a669-28ebcf80a5a2\",\n          \"2f6ebd9b-217d-4878-811f-069522e0161f\",\n          \"4f16fe8c-0967-4358-aa77-85d3bff2d8fa\",\n          \"7a18484f-4b3f-49ac-b95e-c963fea9d5d1\",\n          \"d1347b28-467e-4a98-b388-2e0ad6c7b99e\",\n          \"8f0df1ec-6bdc-4371-9f1e-230160e65fe4\",\n          \"a87f7506-1ff6-47db-8c8f-75153d3d8474\",\n          \"dedc4df7-5eab-4e98-aa28-5d16a99b98e7\"\n        ]\n      },\n      {\n        \"ID\": \"4198e708-4e70-41f4-9466-dfc4cc171bfc\",\n        \"Name\": \"Implementation Attacks\",\n        \"Description\": \"\",\n        \"threatRuleGroupIDs\": [],\n        \"threatRuleIDs\": [\n          \"b3450129-f094-4d50-bc87-efb4e8e84a12\",\n          \"4611ab6f-adbf-47f3-86ff-8af0ac645d80\",\n          \"3084a3b9-fdba-4bb1-97fa-c59ddbea7d22\"\n        ]\n      },\n      {\n        \"ID\": \"27b2bc15-e19c-452e-b096-4f910810e42f\",\n        \"Name\": \"Physical Link Attacks\",\n        \"Description\": \"\",\n        \"threatRuleGroupIDs\": [],\n        \"threatRuleIDs\": [\n          \"21c438f5-30d1-4cfc-9deb-78827b036a22\",\n          \"8aa3a3b1-0aff-4e15-ad59-cc40b75dbdbd\"\n        ]\n      },\n      {\n        \"ID\": \"78cbfae0-bbd0-47a5-91ff-223518ffd7b1\",\n        \"Name\": \"Advanced Network Attacks\",\n        \"Description\": \"\",\n        \"threatRuleGroupIDs\": [],\n        \"threatRuleIDs\": [\n          \"8c29ed3b-b151-41de-81ae-627227aaa104\",\n          \"2cb626ff-1bee-4cb1-a509-aa1ca3e79ea0\",\n          \"a625c7a8-adde-4721-85fe-336a25d1da61\",\n          \"d4a9ad7c-c4fe-49ae-ba3f-0bb48a60642d\",\n          \"c78c1ed5-3f0a-4e70-810c-9527f1aadad2\"\n        ]\n      }\n    ],\n    \"threatRules\": [\n      {\n        \"ID\": \"48cd5ba9-d234-442e-aebb-0011005f806d\",\n        \"Name\": \"Hardware trojan\",\n        \"Description\": \"ToDo\",\n        \"IsActive\": true,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"b703d3d9-1f29-480a-b7ad-b11716727a91\",\n          \"ThreatCategoryIDs\": [\n            \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"6065e8dd-23c0-4dc9-ad51-628af88f3309\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"IsCustomDesign\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"RuleGenerationType\": 2,\n        \"overridenRuleIDs\": [],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"b8e6349e-a52a-4f15-a349-312fc809fbb8\",\n        \"Name\": \"MitM attack\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"e58fcbde-e429-4704-9f22-c00d187994bc\",\n          \"ThreatCategoryIDs\": [\n            \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n            \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": []\n            },\n            {\n              \"TypeIDs\": []\n            }\n          ],\n          \"NodeRestrictions\": [\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": -1,\n              \"IsOR\": false,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ProvidesConfidentiality\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            },\n            {\n              \"Layer\": 1,\n              \"NodeNumber\": -1,\n              \"IsOR\": true,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ProvidesIntegrity\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            },\n            {\n              \"Layer\": 1,\n              \"NodeNumber\": -1,\n              \"IsOR\": true,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ProvidesSenderAuthenticity\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            },\n            {\n              \"Layer\": 1,\n              \"NodeNumber\": -1,\n              \"IsOR\": false,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ProvidesReceiverAuthenticity\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ],\n          \"Target\": -1\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": [],\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"29d9866c-8a0b-4443-ada2-116171c608f9\",\n        \"Name\": \"Process -> Data Store\",\n        \"Description\": \"Process has outbound data flow to data store.\",\n        \"IsActive\": false,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"3bbe354c-317a-4f76-bdbb-75543b5d5aa4\",\n            \"369640cc-1b53-4a2e-9e3b-a74c187e68e7\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"c7598413-4382-43e9-9904-fd9d877eb7a9\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [],\n          \"Target\": 0\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": []\n      },\n      {\n        \"ID\": \"5bf95fe6-cca1-45f5-932a-454b16120983\",\n        \"Name\": \"Process -> Process\",\n        \"Description\": \"Process sends output to another process.\",\n        \"IsActive\": false,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"3bbe354c-317a-4f76-bdbb-75543b5d5aa4\",\n            \"a77f314c-f74e-4340-a993-5a1a24f26db4\",\n            \"369640cc-1b53-4a2e-9e3b-a74c187e68e7\",\n            \"422b9042-212d-4467-a000-2528a2e09f8b\",\n            \"8687e614-c127-418b-8fda-536bb2f0708f\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [],\n          \"Target\": 0\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": []\n      },\n      {\n        \"ID\": \"950ae971-fb79-4df0-8df7-0ce1135ff194\",\n        \"Name\": \"Process -> Ext. Entity\",\n        \"Description\": \"Process sends output to external entity (code).\",\n        \"IsActive\": false,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"3bbe354c-317a-4f76-bdbb-75543b5d5aa4\",\n            \"a77f314c-f74e-4340-a993-5a1a24f26db4\",\n            \"369640cc-1b53-4a2e-9e3b-a74c187e68e7\",\n            \"422b9042-212d-4467-a000-2528a2e09f8b\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"02b39924-b8f2-44da-a2bc-be1bd2450f68\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [],\n          \"Target\": 0\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": []\n      },\n      {\n        \"ID\": \"6f361cd2-f478-4dad-a669-28ebcf80a5a2\",\n        \"Name\": \"Process -> Phy. Ext. Entity\",\n        \"Description\": \"Process sends output to external entity (human).\",\n        \"IsActive\": false,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"a77f314c-f74e-4340-a993-5a1a24f26db4\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"03e3750c-8549-4589-8269-e0121b3f26a4\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [],\n          \"Target\": 0\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": []\n      },\n      {\n        \"ID\": \"2f6ebd9b-217d-4878-811f-069522e0161f\",\n        \"Name\": \"Process <- Data Store\",\n        \"Description\": \"Process has inbound data flow from a data store.\",\n        \"IsActive\": false,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"3bbe354c-317a-4f76-bdbb-75543b5d5aa4\",\n            \"f0e814f3-b3d2-4357-b155-8fffd70ec42e\",\n            \"422b9042-212d-4467-a000-2528a2e09f8b\",\n            \"8687e614-c127-418b-8fda-536bb2f0708f\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"c7598413-4382-43e9-9904-fd9d877eb7a9\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [],\n          \"Target\": 1\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": []\n      },\n      {\n        \"ID\": \"4f16fe8c-0967-4358-aa77-85d3bff2d8fa\",\n        \"Name\": \"Process <- Process\",\n        \"Description\": \"Process has inbound data flow from a process.\",\n        \"IsActive\": false,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"3bbe354c-317a-4f76-bdbb-75543b5d5aa4\",\n            \"a77f314c-f74e-4340-a993-5a1a24f26db4\",\n            \"422b9042-212d-4467-a000-2528a2e09f8b\",\n            \"8687e614-c127-418b-8fda-536bb2f0708f\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [],\n          \"Target\": 1\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": []\n      },\n      {\n        \"ID\": \"7a18484f-4b3f-49ac-b95e-c963fea9d5d1\",\n        \"Name\": \"Process <- Ext. Entity\",\n        \"Description\": \"Process has inbound data flow from a external entity.\",\n        \"IsActive\": false,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"3bbe354c-317a-4f76-bdbb-75543b5d5aa4\",\n            \"422b9042-212d-4467-a000-2528a2e09f8b\",\n            \"8687e614-c127-418b-8fda-536bb2f0708f\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"02b39924-b8f2-44da-a2bc-be1bd2450f68\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [],\n          \"Target\": 1\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": []\n      },\n      {\n        \"ID\": \"d1347b28-467e-4a98-b388-2e0ad6c7b99e\",\n        \"Name\": \"Data Store <- Process\",\n        \"Description\": \"Process has outbound data flow to data store.\",\n        \"IsActive\": false,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"f0e814f3-b3d2-4357-b155-8fffd70ec42e\",\n            \"a77f314c-f74e-4340-a993-5a1a24f26db4\",\n            \"369640cc-1b53-4a2e-9e3b-a74c187e68e7\",\n            \"422b9042-212d-4467-a000-2528a2e09f8b\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"c7598413-4382-43e9-9904-fd9d877eb7a9\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [],\n          \"Target\": 1\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": []\n      },\n      {\n        \"ID\": \"8f0df1ec-6bdc-4371-9f1e-230160e65fe4\",\n        \"Name\": \"Data Store -> Process\",\n        \"Description\": \"Process has inbound data flow from data store.\",\n        \"IsActive\": false,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"a77f314c-f74e-4340-a993-5a1a24f26db4\",\n            \"369640cc-1b53-4a2e-9e3b-a74c187e68e7\",\n            \"422b9042-212d-4467-a000-2528a2e09f8b\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"c7598413-4382-43e9-9904-fd9d877eb7a9\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [],\n          \"Target\": 0\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": []\n      },\n      {\n        \"ID\": \"a87f7506-1ff6-47db-8c8f-75153d3d8474\",\n        \"Name\": \"Ext. Entity -> Process\",\n        \"Description\": \"External interactor passes input to process.\",\n        \"IsActive\": false,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"3bbe354c-317a-4f76-bdbb-75543b5d5aa4\",\n            \"a77f314c-f74e-4340-a993-5a1a24f26db4\",\n            \"369640cc-1b53-4a2e-9e3b-a74c187e68e7\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"02b39924-b8f2-44da-a2bc-be1bd2450f68\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [],\n          \"Target\": 0\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": []\n      },\n      {\n        \"ID\": \"dedc4df7-5eab-4e98-aa28-5d16a99b98e7\",\n        \"Name\": \"Ext. Entity <- Process\",\n        \"Description\": \"External interactor gets input from process.\",\n        \"IsActive\": false,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"3bbe354c-317a-4f76-bdbb-75543b5d5aa4\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"02b39924-b8f2-44da-a2bc-be1bd2450f68\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [],\n          \"Target\": 1\n        },\n        \"RuleGenerationType\": 1,\n        \"overridenRuleIDs\": []\n      },\n      {\n        \"ID\": \"cb3d7440-5d0f-482a-93cb-5ae9c625e31d\",\n        \"Name\": \"Uncleared Content\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"5656f112-8443-4245-aa38-38cd9d9375e0\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"69401648-0084-45ca-b984-505173c9cdb1\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"NewProperty1\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"3459508a-9169-41ce-8e3a-6ea968023a3a\",\n        \"Name\": \"Physical Side Channels\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"c097b67f-1179-4f30-924c-3a4e54c04d9d\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"e8430761-3c2e-4db0-adbd-5310214574c2\",\n          \"DetailRestrictions\": []\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"821594a6-02e5-4a15-9a72-9cca5b57ee92\",\n        \"Name\": \"FW Dumping\",\n        \"Description\": \"This enables IP theft and allows debugging of binaries to find further vulnerabilities that can be exploited\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"5605adab-044a-4b1f-9344-90a602d8d448\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"cf7355d0-6f0c-4ad8-afa2-8689a81e28b8\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"e8430761-3c2e-4db0-adbd-5310214574c2\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"7cfa63f6-262b-4da3-aa88-6478522b45c5\",\n        \"Name\": \"FW Overwrite\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"01a37617-b7ac-446a-86fa-e70c957d154c\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\",\n            \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"cf7355d0-6f0c-4ad8-afa2-8689a81e28b8\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"e8430761-3c2e-4db0-adbd-5310214574c2\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"5c21d6b7-2390-4f72-b29e-7d7985a30293\",\n        \"Name\": \"Improper Isolation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"d4292863-c64e-4123-806f-71590ec76ed3\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"8bd42f0c-a4d2-4d98-9dcb-b9b100114fa5\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"HasTrustedExecutionEnvironment\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"7b825bd7-222e-476f-bf22-85fe2e50eb6c\",\n        \"Name\": \"DoS attack from Internet\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"8f9a24d4-e962-4136-b0ec-8e9f797a6f62\",\n          \"ThreatCategoryIDs\": [\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": -1,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": []\n            },\n            {\n              \"TypeIDs\": []\n            }\n          ],\n          \"NodeRestrictions\": [\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": -1,\n              \"IsOR\": false,\n              \"RestType\": 2,\n              \"PropertyRest\": {\n                \"ID\": \"\",\n                \"ComparisonType\": \"==\",\n                \"Value\": null\n              },\n              \"DataflowRest\": {\n                \"TrustAreaIDs\": [\n                  \"b76ebd30-234d-4704-bf27-ab3e0bf5ae97\"\n                ]\n              },\n              \"SenderInterfaceRestriction\": {\n                \"Property\": {\n                  \"ID\": \"\",\n                  \"ComparisonType\": \"==\",\n                  \"Value\": null\n                }\n              }\n            }\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"18b56da2-a891-4137-a1d6-13f8b4a31d00\",\n        \"Name\": \"Log manipulation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"97c0d7a1-13c7-43d5-b03c-75845f973af5\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"c17cbe5c-3210-42fc-be1e-05f1f915865b\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"a74ba004-2165-4721-9b9b-2ce4b9df88c2\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 3,\n              \"PropertyRest\": {\n                \"ID\": \"\",\n                \"ComparisonType\": \"==\",\n                \"Value\": null\n              },\n              \"PhyElementRest\": {\n                \"Property\": {\n                  \"ID\": \"IsEncrypted\",\n                  \"ComparisonType\": \"==\",\n                  \"Value\": false\n                }\n              }\n            }\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"13b5172b-9d6c-49a3-9580-fb256d5cd506\",\n        \"Name\": \"Decommissioned data store\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"327a2f35-8cf5-46d5-a973-a174f6f7be23\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"80aa0465-21e0-41bd-b521-84a346c5f54b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": false,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"IsEncrypted\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"IsVolatile\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"ddfef636-378c-4874-b2ea-33b0fcfe22c5\",\n        \"Name\": \"Access data exposure\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"7dc1eb8e-2312-4b2f-becf-f9725d45cdce\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"367702af-ceba-459b-84e5-27efe918968e\",\n          \"DetailRestrictions\": []\n        },\n        \"overridenRuleIDs\": [\n          \"358f4f37-445a-4336-8107-c02d7b9cd3a4\"\n        ],\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"32d4322f-482d-4a59-8f62-964ef8014a0b\",\n        \"Name\": \"Radio jamming\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"23c3a785-a539-4570-aee0-42bdffb43983\",\n          \"ThreatCategoryIDs\": [\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": -1,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": []\n            },\n            {\n              \"TypeIDs\": []\n            }\n          ],\n          \"NodeRestrictions\": [\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": -1,\n              \"IsOR\": true,\n              \"RestType\": 10,\n              \"PropertyRest\": {\n                \"ID\": \"\",\n                \"ComparisonType\": \"==\",\n                \"Value\": null\n              },\n              \"SenderInterfaceRestriction\": {\n                \"Property\": {\n                  \"ID\": \"IsWireless\",\n                  \"Value\": true\n                }\n              }\n            },\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": -1,\n              \"IsOR\": false,\n              \"RestType\": 11,\n              \"PropertyRest\": {\n                \"ID\": \"\",\n                \"ComparisonType\": \"==\",\n                \"Value\": null\n              },\n              \"ReceiverInterfaceRestriction\": {\n                \"Property\": {\n                  \"ID\": \"IsWireless\",\n                  \"ComparisonType\": \"==\",\n                  \"Value\": true\n                }\n              }\n            }\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"b3450129-f094-4d50-bc87-efb4e8e84a12\",\n        \"Name\": \"Bad certificate\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"0b47795b-b42d-49d1-bf50-7f4889994fea\",\n          \"ThreatCategoryIDs\": [\n            \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n            \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": -1,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": []\n            },\n            {\n              \"TypeIDs\": []\n            }\n          ],\n          \"NodeRestrictions\": [\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": -1,\n              \"IsOR\": false,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ProvidesReceiverAuthenticity\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"4611ab6f-adbf-47f3-86ff-8af0ac645d80\",\n        \"Name\": \"Improper user input validation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"d92ccd9c-3a24-4e07-a2ca-c1e9949bb386\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": -1,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"02b39924-b8f2-44da-a2bc-be1bd2450f68\",\n                \"03e3750c-8549-4589-8269-e0121b3f26a4\"\n              ]\n            },\n            {\n              \"TypeIDs\": []\n            }\n          ],\n          \"NodeRestrictions\": [\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": 0,\n              \"IsOR\": true,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"7632a126-216a-4463-83ef-6ce82331d9f8\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            },\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": 0,\n              \"IsOR\": false,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"18571d26-3d51-45b8-96f0-ff6e273e70c6\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"32dab43f-2dc8-4109-9420-ee7c118a82d5\",\n        \"Name\": \"Limitation of the charging power\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"5f755466-4417-4060-83de-64bddeabd1ba\",\n          \"DetailRestrictions\": []\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"4609cf84-96fa-4054-bf45-5b33993ce648\",\n        \"Name\": \"Blocking battery charging\",\n        \"Description\": \"For example, https://www.brokenwire.fail/\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"5f755466-4417-4060-83de-64bddeabd1ba\",\n          \"DetailRestrictions\": []\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"1d39d1b0-8f3c-40f7-bb6d-f7699b3b4b07\",\n        \"Name\": \"Overcharging\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"5f755466-4417-4060-83de-64bddeabd1ba\",\n          \"DetailRestrictions\": []\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"358f4f37-445a-4336-8107-c02d7b9cd3a4\",\n        \"Name\": \"Cleartext data storage\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"ef144ae1-4c70-400e-8222-b8a7dd3bf3e9\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"c7598413-4382-43e9-9904-fd9d877eb7a9\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ContainsSensitiveData\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ProcessedDataSensitivity\",\n                \"ComparisonType\": \">=\",\n                \"Value\": 2\n              }\n            }\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"2759171a-24e3-4bfe-8ca7-5814902a000e\",\n        \"Name\": \"Cleartext storage on physical storage\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"e851a284-6b41-41c9-9efd-dc8b01f788da\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"c7598413-4382-43e9-9904-fd9d877eb7a9\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 3,\n              \"PropertyRest\": {\n                \"ID\": \"\",\n                \"ComparisonType\": \"==\",\n                \"Value\": null\n              },\n              \"PhyElementRest\": {\n                \"Property\": {\n                  \"ID\": \"IsEncrypted\",\n                  \"ComparisonType\": \"==\",\n                  \"Value\": false\n                }\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"8b527d06-5d08-41c1-91fc-1c4146858987\",\n        \"Name\": \"Missing encryption\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"bb7358c1-e5b6-424f-962d-daab17345b63\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": -1,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": []\n            },\n            {\n              \"TypeIDs\": []\n            }\n          ],\n          \"NodeRestrictions\": [\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": -1,\n              \"IsOR\": false,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ProvidesConfidentiality\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"da0924b8-967c-406e-a2f5-a6ebac21de1d\",\n        \"Name\": \"Missing integrity check\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"001ba17c-0400-4369-912e-0ceda3ccd227\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": -1,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": []\n            },\n            {\n              \"TypeIDs\": []\n            }\n          ],\n          \"NodeRestrictions\": [\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": -1,\n              \"IsOR\": false,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ProvidesIntegrity\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"3084a3b9-fdba-4bb1-97fa-c59ddbea7d22\",\n        \"Name\": \"SQL Injection\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"1a511f9e-5d1b-47b9-9071-4d39407cc75c\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": -1,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": []\n            },\n            {\n              \"TypeIDs\": [\n                \"74245351-b923-4cd6-b9e7-fe9f9916cbf5\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": []\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"4c58a730-0161-4385-8249-bbf603ae1b88\",\n        \"Name\": \"Plaintext password\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"f0ef09ed-0cde-4b12-beb6-f1640132f3e6\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"4f5e6bf4-c9c4-4ea6-9b0e-5c861570e6ec\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"367702af-ceba-459b-84e5-27efe918968e\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ea6098a1-cc93-4f7d-a6c6-e9ec84e8c393\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"af1cd836-48c2-437c-93d0-58b7c9e1d0f6\",\n        \"Name\": \"Password hash w/o salt\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"0e3c0e3e-1587-46f8-93ea-e9091dff5958\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"367702af-ceba-459b-84e5-27efe918968e\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": false,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"452b2b74-1eb6-4edb-8921-274b2332c7bf\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ea6098a1-cc93-4f7d-a6c6-e9ec84e8c393\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"09881484-9a79-427d-a638-3e894af45c13\",\n        \"Name\": \"Missing authentication\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"d46f6e31-ae41-4d6e-93fc-0e6c3bbb295d\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"4e797b3d-fcdd-43ce-953e-8d5af2c47d91\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": false,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"db9caa64-fec1-47e8-9ed8-97896030cc90\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"a5bb6218-f4e3-445f-95b3-1fc0be602d36\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"5c467e46-e642-49ad-a057-4784ec792125\",\n        \"Name\": \"Malicious code implanted\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"be14adbc-19a7-48c8-8f13-2566559e63e2\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"80aa0465-21e0-41bd-b521-84a346c5f54b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"IsEncrypted\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"2af47360-11c3-45e3-a43f-fc3efa8f6f4d\",\n        \"Name\": \"Reverse engineering\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"f6ddb913-05ab-485a-a736-46a3f7466f85\",\n          \"ThreatCategoryIDs\": [\n            \"a6a57921-7fcb-4f54-b0f5-bac0a0f74163\",\n            \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"a051ae84-5f0a-4f8e-a468-2d309cd7223f\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"IsCustomDesign\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"53fc96a4-96a0-42cc-bb2a-fc4515b8b008\",\n        \"Name\": \"PCB oversupply\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"90a4e8f3-c750-47c4-97fd-fa9e25b9b599\",\n          \"ThreatCategoryIDs\": [\n            \"a6a57921-7fcb-4f54-b0f5-bac0a0f74163\",\n            \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"a051ae84-5f0a-4f8e-a468-2d309cd7223f\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": false,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"IsIn-HouseProduced\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"IsReplaceable\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"9846541d-9bf3-4a2e-98cb-1ad13da5648b\",\n        \"Name\": \"Malicious peripheral\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"21c6b5ef-82c7-41e5-bb07-de93445b2156\",\n          \"ThreatCategoryIDs\": [\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"a051ae84-5f0a-4f8e-a468-2d309cd7223f\",\n          \"DetailRestrictions\": []\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"1da12d13-b7ea-4179-8c6b-b87a338d95a5\",\n        \"Name\": \"Provisioning data cloning\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"a912b48a-3b4d-44ab-b8f3-28000ca945c4\",\n          \"ThreatCategoryIDs\": []\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"a051ae84-5f0a-4f8e-a468-2d309cd7223f\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"IsIn-HouseProduced\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"63fb20c8-4a32-430e-bfa4-587503eaf572\",\n        \"Name\": \"Chip oversupply\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"90a4e8f3-c750-47c4-97fd-fa9e25b9b599\",\n          \"ThreatCategoryIDs\": [\n            \"a6a57921-7fcb-4f54-b0f5-bac0a0f74163\",\n            \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"6065e8dd-23c0-4dc9-ad51-628af88f3309\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": false,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"IsCustomDesign\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"IsIn-HouseProduced\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"d0736981-7141-4d93-b493-d99135b8d236\",\n        \"Name\": \"Permissive status display\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"9538abd8-f79c-4097-b2dd-716e50a125ee\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"6b505c9a-c505-4305-8c07-a3cde1c1ddfc\",\n          \"DetailRestrictions\": []\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"2b24dfec-f29a-4682-8066-db29831234ec\",\n        \"Name\": \"Missing password field masking\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"b9436449-7896-4be6-89f8-a19e1c8d014f\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"6b505c9a-c505-4305-8c07-a3cde1c1ddfc\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"04fc735e-8da5-409d-93c9-5d56eb0a852d\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"e3a2c92b-834f-408e-a4d2-87cfc66bd9fc\",\n        \"Name\": \"Password hash w/ predictable salt\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"05e04798-41ce-4919-a92b-264f7e985de2\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"367702af-ceba-459b-84e5-27efe918968e\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": false,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ea6098a1-cc93-4f7d-a6c6-e9ec84e8c393\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"452b2b74-1eb6-4edb-8921-274b2332c7bf\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"834aa7e3-1a0b-47a8-abdc-b4b1a6705377\",\n        \"Name\": \"IC reverse engineering\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"e6c3d6f5-f4c7-48b7-b516-2092c3557c81\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\",\n            \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"e8430761-3c2e-4db0-adbd-5310214574c2\",\n          \"DetailRestrictions\": []\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"78a3949d-8677-4426-b2b1-eb20b4296821\",\n        \"Name\": \"Draining attack\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"1447713d-9ad6-454e-81d8-c9f4ef34c72b\",\n          \"ThreatCategoryIDs\": [\n            \"9e715340-1a69-47df-864a-7c3b5a9a678e\",\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"08d8fbba-5de4-4538-8674-43e214c3ebad\",\n            \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"1dc32bac-147f-42a4-a13c-44e5b59f7b81\",\n          \"DetailRestrictions\": []\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"8ab20d5d-f624-46f5-beeb-833327d8673f\",\n        \"Name\": \"Hard-coded credentials\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"723dfb40-4ceb-4232-bda5-73bcb3c76ac0\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"e1e92ae3-ee61-4cae-bfb5-be18e97ea587\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"34b65a9d-ca44-44b0-b66f-aa5bacfc53b4\",\n        \"Name\": \"Default password\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"5e7fd04c-0e14-4c76-800d-f581bcf7c7f6\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"714ed1de-855c-491b-8a08-745a99e17413\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"67919611-8ec3-4d48-bbd7-03f963d6f12c\",\n        \"Name\": \"Password requirements\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"5435aa9a-ad52-470f-8fa5-81a4f926b6a6\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"540e39da-3227-4e6c-86ea-32a017318511\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"5585cf20-9e87-4ae5-960a-a952b07c37e5\",\n        \"Name\": \"Single-factor authentication\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"63dfaefa-c8a8-4725-b6d6-2efff7306639\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"88763e20-7878-4525-81d8-c4d09b867042\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"b3a678a2-87a5-42ae-a1ef-4ec599554471\",\n        \"Name\": \"Restriction of attempts\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"296e95fe-e06d-4ae3-be84-da98df4a122c\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"aa74f499-b995-4f5e-8d92-91f3ca172743\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"61452452-9fdc-4023-873d-93cd6d018abb\",\n        \"Name\": \"Session ID expiration\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"bf289171-82c3-431a-b3f1-28d17e5a6546\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"51473250-3891-4342-a8b8-687db16ffef3\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"dde91006-ebc4-4e9c-906b-8c3591266097\",\n        \"Name\": \"Session timeout\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"bf289171-82c3-431a-b3f1-28d17e5a6546\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"a21a6894-256f-4bfd-bd49-09352d054399\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"a100a6c5-5f38-4224-a74a-825fa89579c2\",\n        \"Name\": \"Password recovery\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"2f483201-0209-4320-ba2e-2d692274aab5\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"a9b6390d-0145-4e0f-8420-8a9b8f728c3d\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"96876c2e-a3e9-4e0f-afd0-fe721dd0f295\",\n        \"Name\": \"Client-side hashing\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"4ee3fc8a-87a5-4fdf-868f-fb35cd12dc91\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ba8dc5f0-e1a9-4263-8179-747791b873ee\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"2b389d13-5f71-4bb4-b111-a7fee2b6a486\",\n        \"Name\": \"Restriction to hardware features\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"9e85cf25-febb-46ca-a5f5-c6283412a87b\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"6c83ccbc-ffbd-4bd6-b207-07386e3393c5\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"4d88ce07-2a06-4ae3-942a-46eb25ccdd9b\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"61e37274-9751-4250-8a4d-6476edc8f732\",\n        \"Name\": \"Boot Code Protection in RAM\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"f0a8edb7-d65f-423f-a391-120d1eb04e02\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"885834f4-b8b6-485b-8690-6ac525dbb59d\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"c54de80f-b548-4432-9ec0-fa3a579be7e6\",\n        \"Name\": \"Updatable\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"99864969-3b71-45ad-bae5-09bc4ecc5cc1\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"367b80cd-1b41-483b-a157-b143714b8af7\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"c6535534-7656-4819-93fe-19d9a78a9390\",\n        \"Name\": \"Roll-back\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"c23a62c8-901a-412b-80b8-d2574103b733\",\n          \"ThreatCategoryIDs\": [\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"d951b792-f84b-4ab3-82d1-21867e202755\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"85b3711a-33d2-4cd2-9c84-471e76cc761c\",\n        \"Name\": \"Improper debug access control\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"8a6476b9-7a5c-4306-bd43-db6fe32bbf66\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"2d746c06-a57d-41af-9712-f9d8059425eb\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"f40ce61a-c823-4ca7-ab51-a70dbd9718a6\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"12c8413b-e1cc-40d6-ae07-6321c5fbf4a0\",\n        \"Name\": \"Internal assets exposed\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"1a99fb9b-d1f0-4215-93a6-5cd9fd272026\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"2d746c06-a57d-41af-9712-f9d8059425eb\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"517b62dd-eea7-426e-82c6-2c458eed0aaf\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"5aac31c8-fcb7-4d27-8937-e2c9747b83d4\",\n        \"Name\": \"Address Region Overlap\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"24645edb-85ac-438b-9033-ba2721c3e2c7\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"ea189855-6883-489f-a3d0-77d4ac51a6ef\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ca6a9224-153b-4c06-8c1b-4ea3333c8e92\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"6630ce3a-e21d-467a-b669-99418e95cd8a\",\n        \"Name\": \"State Transition\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"5656f112-8443-4245-aa38-38cd9d9375e0\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"ea189855-6883-489f-a3d0-77d4ac51a6ef\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"16ab50f4-dd94-43dd-8480-37cae5c61043\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"6aec11cc-995c-4ee9-a1ce-506b071f3da3\",\n        \"Name\": \"Risky cryptographic algorithm \",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"31f89637-4b8a-41e9-acac-9d012767a424\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\",\n            \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"783c742d-ebbf-4a58-b8c9-bdc0faeff57d\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"2ee8ccf6-2886-4ebe-81d9-46a408b553a3\",\n        \"Name\": \"Less-secure downgrade\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"97b5a1d4-be82-4485-82f6-e4532795a20b\",\n          \"ThreatCategoryIDs\": [\n            \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n            \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"56a10ad5-a9bf-426f-8e83-ba07561ca78b\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"f46ae96c-b62c-4fda-955d-6ed55c157c7f\",\n        \"Name\": \"Weak block cipher mode\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"a20d6e53-4426-4700-a04f-a4018bc7bfce\",\n          \"ThreatCategoryIDs\": [\n            \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n            \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"518bbb50-aeee-4c87-95d1-8724a4dac569\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"dfac545d-b449-45d0-95bd-a7814b1a97ce\",\n        \"Name\": \"Appropriate parameters\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"a0729a41-bcc9-43d8-9c86-bfb26c64e93c\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"08377961-8f56-4b56-b684-331f77810f1d\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"4e5318de-8259-41cd-8704-8842a959b9c6\",\n        \"Name\": \"Sufficient entropy\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"0ffd675d-d83c-4f74-8835-398e7f3930cb\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"420f03a2-1ab7-4bc2-910d-4ea025518da2\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"a904d935-a9d7-45d9-83c8-c403a57e0b80\",\n        \"Name\": \"Nonce reuse\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"680ceebd-357c-49d6-8bfd-390dc6c51dde\",\n          \"ThreatCategoryIDs\": [\n            \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n            \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\",\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"838f741c-120e-4b73-951a-d55a11d36ca4\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"f35ccff8-6497-4b28-8627-7f255bce0e02\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"12caa9f9-0b1c-4ce0-ac2b-ebee69001b1e\",\n        \"Name\": \"HID spoofing\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"195d942e-02f8-49ad-873f-299f4b4ad4ec\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\",\n            \"b1ff0675-f9b7-4ffb-bdd5-f621c6580d9a\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"111a5819-f53f-4a8d-81df-6b756a20efe7\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"23564ce2-4786-4144-85b6-d03de2771d6b\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"38d27f20-a7ee-40dc-aa6f-b10c98d72409\",\n        \"Name\": \"Malicious file\",\n        \"Description\": \"Social engineering: An USB flash drive contains interesting but malicious files\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"cf948333-b659-40ff-b93f-d4bdc8c980d1\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"111a5819-f53f-4a8d-81df-6b756a20efe7\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"e884ecfe-bda1-4f0b-86f7-3ce0d735aeeb\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"8597431f-52e2-4d89-bb21-7d34185dbfe6\",\n        \"Name\": \"USB killer\",\n        \"Description\": \"Note: this type of attack is also possible at other interfaces such as HDMI, Thunderbolt, etc.\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"915f674e-926b-4bd9-94cb-ee8b4637bc80\",\n          \"ThreatCategoryIDs\": [\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"88d19822-b1b0-469f-ae00-1bc600ccaa1d\",\n            \"644f8521-6b49-41bc-86df-4064b89fb881\",\n            \"96bdc11d-dbb0-4785-8a5c-373e2c492eb0\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"111a5819-f53f-4a8d-81df-6b756a20efe7\",\n          \"DetailRestrictions\": []\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"b8438e31-cc77-4400-86c0-14aa01d411ae\",\n        \"Name\": \"Ethernet port scan\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"f5949698-47d4-48ee-a116-2d212695c41f\",\n          \"ThreatCategoryIDs\": []\n        },\n        \"overridenRuleIDs\": [\n          \"fa055483-b3a2-461f-b09c-46e99de0455e\"\n        ],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"58e0c62c-e5b7-4e9f-9f8a-f8150cf18930\",\n          \"DetailRestrictions\": []\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"fa055483-b3a2-461f-b09c-46e99de0455e\",\n        \"Name\": \"WiFi port scan\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"f5949698-47d4-48ee-a116-2d212695c41f\",\n          \"ThreatCategoryIDs\": []\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"59f2fd67-bc38-4447-9c14-d9306283bbe9\",\n          \"DetailRestrictions\": []\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"9ec88af2-3da9-41df-93bf-8cbcb74a7bb6\",\n        \"Name\": \"Protocol design issues\",\n        \"Description\": \"Custom protocols may be not sufficiently tested and therefore more likely include vulnerabilities\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"b8835cb9-3c77-496e-ac2d-2ed6fa7f2d78\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"8a3d81d9-3317-4e5d-88fe-a0e0592295fe\",\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 4,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"c4ce892e-975c-48f5-a0f8-e6eb7591111d\",\n          \"DetailRestrictions\": []\n        },\n        \"ProtocolRestriction\": {\n          \"protocolID\": \"c4ce892e-975c-48f5-a0f8-e6eb7591111d\",\n          \"DetailRestrictions\": []\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"21c438f5-30d1-4cfc-9deb-78827b036a22\",\n        \"Name\": \"Actuator command injection\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"573881b4-ceb6-4d6a-a5c3-9c0e6c5a3b3c\",\n          \"ThreatCategoryIDs\": [\n            \"88d19822-b1b0-469f-ae00-1bc600ccaa1d\",\n            \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\",\n            \"b7935cfe-6a41-45e4-8778-f0fbb1e4018b\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": -1,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": []\n            },\n            {\n              \"TypeIDs\": [\n                \"04be7cf6-00dd-4aa8-b90b-e9bf105e39e7\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": 1,\n              \"IsOR\": false,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"NewProperty3\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"8aa3a3b1-0aff-4e15-ad59-cc40b75dbdbd\",\n        \"Name\": \"Sensor data manipulation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"a76b8768-9d68-4074-b5e1-0f9abc61bcda\",\n          \"ThreatCategoryIDs\": [\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\",\n            \"f2ba26f4-b2da-49a8-aba2-14e42a746d6a\",\n            \"b7935cfe-6a41-45e4-8778-f0fbb1e4018b\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": -1,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"04be7cf6-00dd-4aa8-b90b-e9bf105e39e7\"\n              ]\n            },\n            {\n              \"TypeIDs\": []\n            }\n          ],\n          \"NodeRestrictions\": [\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": 0,\n              \"IsOR\": false,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"NewProperty1\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"b41b621c-4b91-43f9-90ab-b7e955269620\",\n        \"Name\": \"Device theft\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"30cf5142-2339-4130-8a6e-2b05869e6df2\",\n          \"ThreatCategoryIDs\": [\n            \"a6a57921-7fcb-4f54-b0f5-bac0a0f74163\",\n            \"6b8c08cb-3f02-413a-96b4-179bb1f67997\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"6b8b580e-f99a-4e0c-850d-241fccfd0079\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"e9148055-f813-45da-85a8-bfcf4d71ff40\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"87987695-a4ae-4a76-9eae-977592998b8c\",\n        \"Name\": \"Tag cloning\",\n        \"Description\": \"A cloned tag may enable access to sensitive data or restricted areas\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"4f5e6bf4-c9c4-4ea6-9b0e-5c861570e6ec\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\",\n            \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"6970555e-8c1f-466b-add7-35babed4a7fa\",\n          \"DetailRestrictions\": []\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"d2839332-47c8-4f40-9fd9-66aa02a3615d\",\n        \"Name\": \"Tag tracking\",\n        \"Description\": \"Tracking a tag by its unique identifier allows, for example, to create a movement profile\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"61d04f2d-83b1-4152-9aba-4ad188eef06d\",\n            \"2765e61e-29a9-498e-adf8-4d653f488e3d\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"6970555e-8c1f-466b-add7-35babed4a7fa\",\n          \"DetailRestrictions\": []\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"01a4663a-1bac-4d51-ac66-3f957b90d1ab\",\n        \"Name\": \"Tag inventorying\",\n        \"Description\": \"Tags with an EPC are vulnerable to inventory attacks. For example, medical devices such as pacemakers can be used to draw conclusions about the health of individuals.\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"e6ba8518-0074-492c-95e5-ebe89fa601fe\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"6970555e-8c1f-466b-add7-35babed4a7fa\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"edc587ce-e8d8-4340-9e42-d90627777c62\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"08043f24-cc72-435b-ace1-bd593442215d\",\n        \"Name\": \"Unauthorized unplugging\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"7cf3480c-f4db-47cb-be36-b27deb746c64\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"e75f9804-6ae3-4eb6-9011-4b87a0d4823b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"cef5bbac-5833-49bb-9021-9f5200c29c83\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"e8848ea8-e120-4722-bc10-90daf7b4a075\",\n        \"Name\": \"Compliance loss duty cycle limit\",\n        \"Description\": \"For example Europe defines a maximum duty cycle\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 2,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"1180824d-9f8a-4a4a-8398-3775c541a360\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"4edf4a31-e828-4933-9a87-779083e7167e\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"229d9064-0034-4e55-998e-a50d8e0f9dd4\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"0e783801-b482-4721-af49-1be96b16fc59\",\n        \"Name\": \"Communication outage\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"f2b91aaf-7d9f-4baf-8713-13d7625174d9\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"4edf4a31-e828-4933-9a87-779083e7167e\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"229d9064-0034-4e55-998e-a50d8e0f9dd4\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"512c6921-1b40-4e26-86b5-f66609e57d96\",\n        \"Name\": \"Data store theft\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"30cf5142-2339-4130-8a6e-2b05869e6df2\",\n          \"ThreatCategoryIDs\": [\n            \"a6a57921-7fcb-4f54-b0f5-bac0a0f74163\",\n            \"6b8c08cb-3f02-413a-96b4-179bb1f67997\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"80aa0465-21e0-41bd-b521-84a346c5f54b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"IsRemovable\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"8c29ed3b-b151-41de-81ae-627227aaa104\",\n        \"Name\": \"Selective forwarding\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"c7787e71-5c70-462c-9558-ce20e7cfdfe8\",\n          \"ThreatCategoryIDs\": [\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\",\n            \"f3fe9ca9-4c34-40fc-a270-3e6252d01e6f\",\n            \"f2b91aaf-7d9f-4baf-8713-13d7625174d9\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": 2,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\",\n                \"c7598413-4382-43e9-9904-fd9d877eb7a9\",\n                \"04be7cf6-00dd-4aa8-b90b-e9bf105e39e7\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"02b39924-b8f2-44da-a2bc-be1bd2450f68\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\",\n                \"c7598413-4382-43e9-9904-fd9d877eb7a9\",\n                \"04be7cf6-00dd-4aa8-b90b-e9bf105e39e7\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": []\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"2cb626ff-1bee-4cb1-a509-aa1ca3e79ea0\",\n        \"Name\": \"P-E-D\",\n        \"Description\": \"\",\n        \"IsActive\": false,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"c7787e71-5c70-462c-9558-ce20e7cfdfe8\",\n          \"ThreatCategoryIDs\": [\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\",\n            \"f3fe9ca9-4c34-40fc-a270-3e6252d01e6f\",\n            \"f2b91aaf-7d9f-4baf-8713-13d7625174d9\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": 2,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"02b39924-b8f2-44da-a2bc-be1bd2450f68\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"c7598413-4382-43e9-9904-fd9d877eb7a9\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": []\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"a625c7a8-adde-4721-85fe-336a25d1da61\",\n        \"Name\": \"P-E-D-Rev\",\n        \"Description\": \"\",\n        \"IsActive\": false,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"c7787e71-5c70-462c-9558-ce20e7cfdfe8\",\n          \"ThreatCategoryIDs\": [\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\",\n            \"f3fe9ca9-4c34-40fc-a270-3e6252d01e6f\",\n            \"f2b91aaf-7d9f-4baf-8713-13d7625174d9\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": true,\n          \"Target\": 2,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"02b39924-b8f2-44da-a2bc-be1bd2450f68\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"c7598413-4382-43e9-9904-fd9d877eb7a9\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": []\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"d4a9ad7c-c4fe-49ae-ba3f-0bb48a60642d\",\n        \"Name\": \"P-E-P-E\",\n        \"Description\": \"\",\n        \"IsActive\": false,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"c7787e71-5c70-462c-9558-ce20e7cfdfe8\",\n          \"ThreatCategoryIDs\": [\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\",\n            \"f3fe9ca9-4c34-40fc-a270-3e6252d01e6f\",\n            \"f2b91aaf-7d9f-4baf-8713-13d7625174d9\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": 2,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"02b39924-b8f2-44da-a2bc-be1bd2450f68\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"02b39924-b8f2-44da-a2bc-be1bd2450f68\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": []\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"c78c1ed5-3f0a-4e70-810c-9527f1aadad2\",\n        \"Name\": \"P-E-D-Rest\",\n        \"Description\": \"\",\n        \"IsActive\": false,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"c7787e71-5c70-462c-9558-ce20e7cfdfe8\",\n          \"ThreatCategoryIDs\": [\n            \"f7639a0c-e85b-4947-bbec-2ac4a0911827\",\n            \"f3fe9ca9-4c34-40fc-a270-3e6252d01e6f\",\n            \"f2b91aaf-7d9f-4baf-8713-13d7625174d9\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 2,\n        \"DFDRestriction\": {\n          \"AppliesReverse\": false,\n          \"Target\": 2,\n          \"NodeTypes\": [\n            {\n              \"TypeIDs\": [\n                \"e0b99432-98a6-4e32-86d7-ca5f58897cc2\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"02b39924-b8f2-44da-a2bc-be1bd2450f68\"\n              ]\n            },\n            {\n              \"TypeIDs\": [\n                \"c7598413-4382-43e9-9904-fd9d877eb7a9\"\n              ]\n            }\n          ],\n          \"NodeRestrictions\": [\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": 2,\n              \"IsOR\": false,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ContainsUserData\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            },\n            {\n              \"Layer\": 0,\n              \"NodeNumber\": -1,\n              \"IsOR\": false,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"ProvidesConfidentiality\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"6a9008d4-fa27-46b1-8a11-6dbcecb8b211\",\n        \"Name\": \"Human identification\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"bcd08af5-29bf-4ed8-ab6c-e311e88f4c84\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"c2d71a11-6228-4e05-bc93-0ddd45328fde\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"38883a00-d18f-4d1f-8a4c-18741a480557\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"e5f4b790-5898-495d-9b51-5a16d452edff\",\n        \"Name\": \"Privacy-violating interaction\",\n        \"Description\": \"Gestures in public environments result in privacy-violating interaction\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"af3ee78e-9e83-4bd1-b9b5-13ec28765518\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"c2d71a11-6228-4e05-bc93-0ddd45328fde\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"d9919a71-0642-46a5-8056-348e06f8b86e\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"8340469b-525d-4563-a75d-6ca1d60c7409\",\n        \"Name\": \"Hidden interfaces\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"184cd5e5-2517-4d7f-a81a-c411942d3601\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"2d746c06-a57d-41af-9712-f9d8059425eb\",\n          \"DetailRestrictions\": []\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"d714118d-123d-41b4-8997-63b13a5c09d4\",\n        \"Name\": \"Integrity validation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"83d23b79-71c5-488e-adb2-dd0f76d70f44\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"8f47a4ac-0934-4a65-a6f3-07503c92f658\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"90c71cb6-ec32-4eb6-95ca-20a5d7381fc6\",\n        \"Name\": \"Authenticity validation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"83d23b79-71c5-488e-adb2-dd0f76d70f44\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"00f961fc-97ce-4003-8f2e-79a4748ec0b2\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"cb711ade-c26b-4500-8337-4eba00d26975\",\n        \"Name\": \"TOCTOU attack\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"cf63f187-4353-4bf8-bc37-a7392c6d91bf\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"000441ff-d15f-46c3-bb9c-0c949063271d\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"1729c2ac-4dd2-449a-bd8a-ee7c11ff1461\",\n        \"Name\": \"Unknown state\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"3df6a845-52a2-40a9-8978-0277efd7cfcb\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"b9caf305-7c53-48c9-beef-2fb2a96cc5b0\",\n        \"Name\": \"Regulation compliance\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"1180824d-9f8a-4a4a-8398-3775c541a360\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"4006de15-8767-4a09-8678-84b8d6b50ae0\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"778eb19f-8f36-4ce5-aa48-70429386b113\",\n        \"Name\": \"Improper log access control\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"97c0d7a1-13c7-43d5-b03c-75845f973af5\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"c17cbe5c-3210-42fc-be1e-05f1f915865b\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"8e4b2af8-b023-4991-80f5-54ffa28cd616\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"c4df07d3-101f-492e-9f90-70d916f7ed43\",\n        \"Name\": \"Missing log rotation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"d0532ce9-51a9-4bb1-84ae-c8c63ee78e7f\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"b0d13562-1629-4724-bb67-f910157ed1c9\",\n        \"Name\": \"Missing log evaluation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"364003cb-3e6c-470a-a6bf-e7a7c93e07fa\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"b4c216c0-ccab-4a4d-a156-1b4979dc2aec\",\n        \"Name\": \"Missing separate location for log files\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"418fe90d-88fd-4066-9339-890501ea07f0\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"c6ac1dcf-ff18-4810-ba64-10aaaf44c135\",\n        \"Name\": \"Missing central log backup\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"bd32d10e-82d6-4e7f-9247-fe2753908e60\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"f51350c5-5401-4276-a8e5-14eba86bc070\",\n        \"Name\": \"Log files contain passwords\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"ef144ae1-4c70-400e-8222-b8a7dd3bf3e9\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"025e828e-d1a0-4487-9c56-09fd6941d4b9\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"e145ffad-ec47-4251-9fa4-1475133db2ff\",\n        \"Name\": \"Missing log entry\",\n        \"Description\": \"Missing security-relevant information for audits: login attempts, changes in user session, firmware updates, etc.\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"afd4bceb-31b0-41cd-9eae-02d2eba6b41c\",\n          \"ThreatCategoryIDs\": [\n            \"c17cbe5c-3210-42fc-be1e-05f1f915865b\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"02b94aae-efea-451e-a017-81be68db03d7\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"c7d5fd7a-4007-480c-a34b-cb32fab17472\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"a154298a-d410-4da4-921d-906165cd5329\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"91abf825-cfca-4386-b5d5-8262423b090d\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"1a582358-45c2-42e2-a21e-61206a4eda7e\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"c86b6500-99cb-46e3-948f-b67b69c9768d\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"0bd863c2-5505-4226-9b28-bab9715c99d1\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"cf4a11cf-4dee-46ef-8c68-48b5dced2de0\",\n        \"Name\": \"Missing reporting system\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"23943ca9-3df9-4d69-a414-6d8fef99d30c\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"c46dc641-6f0f-4e80-9b80-3833f6c4f2c0\",\n        \"Name\": \"Non-disclosure\",\n        \"Description\": \"There are mainly coordinated vulnerability disclosure and non-disclosure. Coordinated vulnerability is important for independent security researchers to get reputation. Non-disclosure could possible lead to public reports without fixed vulnerabilities.\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"25032887-439e-4599-84bf-05d906641a0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"dd2c4c41-45f0-4105-aea4-317943e2f435\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"19f1cf08-5ab0-419c-9d56-b5d4d1fc6e24\",\n        \"Name\": \"Missing bug bounty program\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"25032887-439e-4599-84bf-05d906641a0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"b4c47f35-bcd3-4b18-9b35-8a7f213dcca4\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"370351b8-cef2-43bf-89f2-324a814e00a3\",\n        \"Name\": \"Missing /security page\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"36e1de4b-5129-470f-b06d-208ef7610da8\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"df78de64-d35e-474f-be3b-260f60a13fc6\",\n        \"Name\": \"Missing security.txt\",\n        \"Description\": \"https://securitytxt.org/\\nhttps://en.wikipedia.org/wiki/Security.txt\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"3affc4da-9a78-43ec-990b-75d20edbc410\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"ebf9833c-733d-4356-b390-e754096d0da8\",\n        \"Name\": \"Missing contact email address\",\n        \"Description\": \"E.g. security-alert, security, psirt, csirt@companydomain.com\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"d94f2535-73f9-4c2d-aef1-57b1c9daaa5c\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"543e017c-8bc2-444e-a3fb-d1dbd52ae21b\",\n        \"Name\": \"Missing public policy\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"0c7bdef9-6b56-42db-a22b-a460b08bb27d\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"a68571c4-61b7-4a33-b5d9-104ef2c06ed0\",\n        \"Name\": \"Missing PGP key\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"8aa599b0-9ee2-474f-974b-bbefa09896bd\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"61d4b9c9-19a9-431e-b114-f2c04b48846b\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"4f2b98fa-8173-411d-a9b9-2cb0fb31fbde\",\n        \"Name\": \"Missing timeline info\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"25032887-439e-4599-84bf-05d906641a0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"e7d90cc4-822e-4aab-a161-c766cf13df22\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 1\n      },\n      {\n        \"ID\": \"96661040-05b5-436b-887a-f7864419d691\",\n        \"Name\": \"Missing Firmware Encryption\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"5605adab-044a-4b1f-9344-90a602d8d448\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"ddf75d3c-ac5a-4ca2-8268-a4f7b40add7d\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"ca502567-bafc-40f9-a5e4-8ce94780c3f6\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"434d79b2-574c-4575-813b-19ec7854a139\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"96208355-0119-41f4-9b93-b0a5781e9ae1\",\n        \"Name\": \"Unnecessary components\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"a7e3fa91-ce20-42b3-8e35-e0188ca1ac50\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"dfc187d5-8287-4c8e-99bc-09cc3e26e201\",\n        \"Name\": \"Outdated OS version\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"4ba05121-485a-40eb-832a-f4095c7b88df\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"49344c1a-2368-4a01-a366-023707d0b354\",\n        \"Name\": \"Secure configuration not default\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"41b3d476-6ff9-40d7-ad5b-c5d5fad4cda1\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"b640f7fb-fb76-4de9-bcf2-0883807f58da\",\n        \"Name\": \"Missing component update process\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"36ed4680-0b94-42a9-9863-08eb976c9ebc\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 4\n      },\n      {\n        \"ID\": \"efd73610-90fd-406a-9139-82ff0552bc43\",\n        \"Name\": \"Activated services and ports\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"fb3b36de-11b3-4e5d-9c9c-4dcfab666da6\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"8886f368-618b-4520-a7f5-1db3141da66b\",\n        \"Name\": \"Improper permission configuration\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"c8a14b27-b13f-4358-9f3f-691d01c97c77\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"c93fbf95-01d7-45fb-a786-0eb926e6dc2c\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"16f2c70d-1752-4e7a-b1ac-5f95710c2778\",\n        \"Name\": \"Least privilege violation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"4f5e6bf4-c9c4-4ea6-9b0e-5c861570e6ec\"\n          ],\n          \"ThreatOriginID\": \"66c5f951-6286-4b22-a71a-ee4d6232f689\"\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"7378780b-e280-4494-84f2-0beb4e7257ec\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"019f2476-ceca-47ab-b19e-9c2077cc35fe\",\n        \"Name\": \"Missing file system encryption\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"551ef8ab-1707-4d4c-9845-c8dcc7515fe9\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"85e19877-51a0-4904-8e98-b2fb14be3922\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"11975f59-55e0-420f-9366-513175e9236e\",\n        \"Name\": \"Missing secure boot\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"4f0c5fb9-e24f-487a-b192-66d10c2b97a5\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"1487298b-ff88-4e01-9a60-09b1eaf8a41f\",\n        \"Name\": \"Missing immutable Root Of Trust\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"f170308a-c188-4ae0-bcef-d04af1e429b3\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"17b59f51-59d3-4a8f-9960-a04ce7e96be6\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"10a258f6-49c0-435e-9a66-630039de0dc8\",\n        \"Name\": \"TOCTOU attack\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"f3697413-e4de-4572-90b1-8041e8ff9b67\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"5d407978-73dc-45c9-8402-db692b42dae4\",\n        \"Name\": \"Improper boot order\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"eb678bc0-3ece-4937-bba3-03981c5759a4\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"568a6a24-9109-4f93-b3b3-d3754260387e\",\n        \"Name\": \"Least privilege violation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"66c5f951-6286-4b22-a71a-ee4d6232f689\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"4f5e6bf4-c9c4-4ea6-9b0e-5c861570e6ec\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"2ca79dc4-0a73-4fc2-859b-1b5701530183\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"03d7ff9f-bbdc-4938-974d-cd9766bdb8e0\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"5d59dab8-ca08-4359-8e7d-284dcde6d4b7\",\n        \"Name\": \"Missing application isolation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"2ca79dc4-0a73-4fc2-859b-1b5701530183\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"532fc4c6-b14f-4b9a-b033-f4aaf0d63e25\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"de96008b-1c59-4319-9b5c-4f5a7e97a122\",\n        \"Name\": \"Improper input validation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"d92ccd9c-3a24-4e07-a2ca-c1e9949bb386\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"2ca79dc4-0a73-4fc2-859b-1b5701530183\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"1c1a93cf-acce-4f57-a210-e0b5058f57b8\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"337c4826-08ed-4c40-9542-54f08317ddb0\",\n        \"Name\": \"Keys not stored in security module\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"64bb2754-a187-47c8-aa93-e599f0a97a57\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"eac955da-c90f-4ca8-a1c1-bc186f7f0ad2\",\n        \"Name\": \"Key usage in untrusted environment\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"b43ada71-51c6-4f5e-b310-a1735a41e602\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"1267c02f-4adf-4086-9a9b-c5cc0f81c709\",\n        \"Name\": \"Missing key encryption\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"b6c0efb3-7db3-4dd8-8c60-620027eefa3e\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"a529a0c3-a98e-41be-80f5-84b876ddddc6\",\n        \"Name\": \"Missing tamper resistant unique ID\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"d0bcd70c-fbad-4a16-a606-8b0682ae7afe\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"44545d3e-fa0a-44c7-a19e-8164dab646dc\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"08ee42e8-3525-4767-98e3-f7492f356d2f\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"b41315d4-f62d-4133-9a38-be8097a66ebb\",\n        \"Name\": \"Missing unique user identification\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"c17cbe5c-3210-42fc-be1e-05f1f915865b\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"7e64d98b-ecbe-4921-9545-8b30d0f9bde8\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"6391f8f2-eb04-4caf-b490-49c920315867\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"50864039-1856-432a-9ff2-0acf3cccd644\",\n        \"Name\": \"Missing privilege differentiation\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"4f5e6bf4-c9c4-4ea6-9b0e-5c861570e6ec\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"7e64d98b-ecbe-4921-9545-8b30d0f9bde8\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"cdb65d33-946e-412e-838b-3075e928c4f0\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"d17d5929-ebcd-4c2c-95b6-f7c8ab4c5538\",\n        \"Name\": \"Improper password storage\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"eab94c5b-f7e8-4b2a-9ffb-658aefc8f0d0\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"7e64d98b-ecbe-4921-9545-8b30d0f9bde8\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"984400a6-7bd6-4031-a40c-06f0499e0d86\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"cffa8a3a-ec5b-4e2c-b118-80741e1c8e2a\",\n        \"Name\": \"Missing certificate chain verification\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"20b12b0e-4031-4eb3-ad39-f91489884490\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"8bab4292-bca9-4701-8141-a62fc2b2cded\",\n        \"Name\": \"Certificate expiration\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"e09bd987-fbf4-4f3d-afeb-033e5bdcb7f8\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"ab8ff926-1147-4597-bded-42fbfb71edb2\",\n        \"Name\": \"Revoked certificate\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"463570ce-8495-4b4b-97fe-abed4942059a\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"c9d634b6-7eb8-4210-9e97-58e93a5c09a0\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"135275c4-5523-4a95-a466-47947930377a\",\n        \"Name\": \"Uncleared user data\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"327a2f35-8cf5-46d5-a973-a174f6f7be23\",\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"7e64d98b-ecbe-4921-9545-8b30d0f9bde8\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"e6ee6f25-6e52-4f43-93c4-7ef35eb97024\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"dbf5eca4-f98b-443d-b9a1-8113fafc962e\",\n        \"Name\": \"Password sharing\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"ffd6083b-7183-472c-b250-15b0de223735\",\n          \"ThreatCategoryIDs\": [\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"7e64d98b-ecbe-4921-9545-8b30d0f9bde8\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"6391f8f2-eb04-4caf-b490-49c920315867\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"85519ed2-313e-4c85-85fd-f89109f845d4\",\n        \"Name\": \"Unhandled exceptions\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"9926788f-c85e-43ca-91e4-aa9c0f46656e\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"897ef1fd-f1e7-4527-89e3-2cdaf2c8644a\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"871318c9-4e0c-4ff4-a475-06195ea4e3bb\",\n        \"Name\": \"Sensitive (error) information exposed \",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {},\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"9926788f-c85e-43ca-91e4-aa9c0f46656e\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"f7733c50-2529-459f-9397-8d06f231121c\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 2\n      },\n      {\n        \"ID\": \"bf9e6225-fb28-429a-84f1-fe3be63c3d95\",\n        \"Name\": \"Sensitive (authentication) information exposed\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatCategoryIDs\": [\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 3,\n        \"ComponentRestriction\": {\n          \"componentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"157fd588-2ea2-4260-9a25-86bf8241b31c\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 3\n      },\n      {\n        \"ID\": \"e2529607-c1fd-472d-ad14-c7f2cc719282\",\n        \"Name\": \"Booting manipulated firmware\",\n        \"Description\": \"\",\n        \"IsActive\": true,\n        \"RuleGenerationType\": 1,\n        \"Mapping\": {\n          \"ThreatOriginID\": \"83d23b79-71c5-488e-adb2-dd0f76d70f44\",\n          \"ThreatCategoryIDs\": [\n            \"f19e41bd-9fd9-4046-a195-28d441207fa0\",\n            \"b869918c-0b47-45c3-8fab-0b698043aa66\",\n            \"c0bd6e2f-9784-4c11-9aee-115a966e0a4d\",\n            \"6382e7ee-efbd-40c3-8064-1a1fdd87cdaf\",\n            \"c46b7c74-5979-409d-8ceb-631b8833c596\"\n          ]\n        },\n        \"overridenRuleIDs\": [],\n        \"RuleType\": 1,\n        \"StencilRestriction\": {\n          \"stencilTypeID\": \"80aa0465-21e0-41bd-b521-84a346c5f54b\",\n          \"DetailRestrictions\": [\n            {\n              \"IsOR\": false,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"c31746fb-c296-4eda-b7a5-8227640e9c80\",\n                \"ComparisonType\": \"==\",\n                \"Value\": false\n              }\n            },\n            {\n              \"IsOR\": true,\n              \"Layer\": 0,\n              \"RestType\": 1,\n              \"PropertyRest\": {\n                \"ID\": \"43deca38-18ab-4c2b-98f0-52f0b1bfefac\",\n                \"ComparisonType\": \"==\",\n                \"Value\": true\n              }\n            }\n          ]\n        },\n        \"Severity\": 4\n      }\n    ],\n    \"mitigations\": [\n      {\n        \"ID\": \"99636fb9-9a42-48b5-8368-a935a11dc943\",\n        \"Name\": \"Disable debug access\",\n        \"Description\": \"\",\n        \"mitigatedThreatOriginIDs\": [\n          \"8a6476b9-7a5c-4306-bd43-db6fe32bbf66\"\n        ],\n        \"MitigationTips\": [\n          {\n            \"Name\": \"Remove interface\",\n            \"Description\": \"Any interface used for administration or test purposes during development should be removed from a production device, disabled or made physically inaccessible.\",\n            \"LifeCycles\": [\n              \"I\"\n            ]\n          },\n          {\n            \"Name\": \"Disable interface\",\n            \"Description\": \"All test access points on production units must be disabled or locked, for example by blowing on-chip fuses to disable JTAG.\",\n            \"LifeCycles\": [\n              \"P\"\n            ]\n          },\n          {\n            \"Name\": \"Enable access control\",\n            \"Description\": \"If a production device must have an administration port, ensure it has effective access controls, e.g. strong credential management, restricted ports, secure protocols etc.\",\n            \"LifeCycles\": [\n              \"I\"\n            ]\n          }\n        ],\n        \"mitigatedThreatRuleIDs\": []\n      },\n      {\n        \"ID\": \"8febb6ed-da70-44ff-8d95-cf9a30d6b0ec\",\n        \"Name\": \"Device casing mitigations\",\n        \"Description\": \"\",\n        \"mitigatedThreatOriginIDs\": [],\n        \"MitigationTips\": [\n          {\n            \"Name\": \"PCB design\",\n            \"Description\": \"Make the device circuitry physically inaccessible to tampering, e.g. epoxy chips to circuit board, resin encapsulation, hiding data and address lines under these components etc.\",\n            \"LifeCycles\": [\n              \"I\"\n            ]\n          },\n          {\n            \"Name\": \"Protective casing\",\n            \"Description\": \"Provide secure protective casing and mounting options for deployment of devices in exposed locations.\",\n            \"LifeCycles\": [\n              \"C\"\n            ]\n          },\n          {\n            \"Name\": \"Tamper evident packaging\",\n            \"Description\": \"To identify and deter access within the supply chain, consider making the device and packaging “tamper evident”.\",\n            \"LifeCycles\": [\n              \"C\"\n            ]\n          },\n          {\n            \"Name\": \"Active masking\",\n            \"Description\": \"For high-security deployments, consider design measures such as active masking or shielding to protect against side-channel attacks.\",\n            \"LifeCycles\": [\n              \"C\"\n            ]\n          }\n        ],\n        \"mitigatedThreatRuleIDs\": []\n      },\n      {\n        \"ID\": \"c943341c-b65c-4801-8d8e-d83d047ac0b7\",\n        \"Name\": \"Secure boot\",\n        \"Description\": \"\",\n        \"mitigatedThreatOriginIDs\": [],\n        \"MitigationTips\": [],\n        \"mitigatedThreatRuleIDs\": []\n      },\n      {\n        \"ID\": \"ea061d92-c31b-4644-8f5f-5093f513dd9d\",\n        \"Name\": \"Traffic data encryption\",\n        \"Description\": \"\",\n        \"mitigatedThreatOriginIDs\": [\n          \"e58fcbde-e429-4704-9f22-c00d187994bc\",\n          \"bb7358c1-e5b6-424f-962d-daab17345b63\",\n          \"001ba17c-0400-4369-912e-0ceda3ccd227\"\n        ],\n        \"mitigatedThreatRuleIDs\": [],\n        \"MitigationTips\": [\n          {\n            \"Name\": \"Mutual authentication\",\n            \"Description\": \"Use strong mutual authentication to ensure the authenticity of both endpoints. \",\n            \"LifeCycles\": [\n              \"C\"\n            ]\n          },\n          {\n            \"Name\": \"Signed certificates\",\n            \"Description\": \"Validate the authenticity of public keys by their certificates. Validate the entire certificate chain. \",\n            \"LifeCycles\": [\n              \"I\"\n            ]\n          },\n          {\n            \"Name\": \"Use TLS\",\n            \"Description\": \"Use the latest version of TLS and include only strong cipher suits. \",\n            \"LifeCycles\": [\n              \"I\"\n            ]\n          },\n          {\n            \"Name\": \"Lightweight cryptography\",\n            \"Description\": \"In case TLS is not possible due to performance issues, choose an adequate lightweight cryptography algorithm.\",\n            \"LifeCycles\": [\n              \"I\"\n            ]\n          },\n          {\n            \"Name\": \"Ensure integrity\",\n            \"Description\": \"If no sensitive data are transmitted and performance is a bottle neck, ensure at least the integrity of messages using a message authentication code (MAC).\",\n            \"LifeCycles\": [\n              \"I\"\n            ]\n          }\n        ]\n      }\n    ],\n    \"mitigationGroups\": [\n      {\n        \"ID\": \"6dd5db7a-e54f-4e6f-858a-33449024cf88\",\n        \"Name\": \"Mitigations\",\n        \"Description\": \"\",\n        \"mitigationGroupIDs\": [\n          \"c324cdd7-8c3e-4d10-a91e-202a725430df\",\n          \"4df9ab6b-eb2f-4fc7-8bd7-8b6c2d03e922\",\n          \"627ed2f3-d2af-4f25-925b-2e93a9578a93\"\n        ],\n        \"mitigationIDs\": []\n      },\n      {\n        \"ID\": \"c324cdd7-8c3e-4d10-a91e-202a725430df\",\n        \"Name\": \"Physical Security\",\n        \"Description\": \"https://www.iotsecurityfoundation.org/wp-content/uploads/2019/12/Best-Practice-Guides-Release-2_Digitalv3.pdf\",\n        \"mitigationGroupIDs\": [],\n        \"mitigationIDs\": [\n          \"99636fb9-9a42-48b5-8368-a935a11dc943\",\n          \"8febb6ed-da70-44ff-8d95-cf9a30d6b0ec\"\n        ]\n      },\n      {\n        \"ID\": \"4df9ab6b-eb2f-4fc7-8bd7-8b6c2d03e922\",\n        \"Name\": \"Firmware Security\",\n        \"Description\": \"\",\n        \"mitigationGroupIDs\": [],\n        \"mitigationIDs\": [\n          \"c943341c-b65c-4801-8d8e-d83d047ac0b7\"\n        ]\n      },\n      {\n        \"ID\": \"627ed2f3-d2af-4f25-925b-2e93a9578a93\",\n        \"Name\": \"Network Mitigations\",\n        \"Description\": \"\",\n        \"mitigationGroupIDs\": [],\n        \"mitigationIDs\": [\n          \"ea061d92-c31b-4644-8f5f-5093f513dd9d\"\n        ]\n      }\n    ],\n    \"requirementTypes\": [\n      {\n        \"ID\": \"b008aede-3518-44f3-8cc2-7e92b68e0329\",\n        \"Name\": \"CR-1-1 Human user identification and authentication\",\n        \"Description\": \" \",\n        \"subReqTypeIDs\": [\n          \"6dbaec8c-55cd-402e-9f9b-8089ad5d8e88\",\n          \"91a52e70-60f4-430c-b2f8-292e80931d70\"\n        ],\n        \"RequiredPerLevel\": [\n          true,\n          true,\n          true,\n          true\n        ],\n        \"ReqFulfillRule\": {\n          \"RuleType\": 1,\n          \"SWRule\": {\n            \"ComponentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n            \"PropertyRest\": {\n              \"ID\": \"IsActive\",\n              \"ComparisonType\": \"==\",\n              \"Value\": true\n            }\n          }\n        }\n      },\n      {\n        \"ID\": \"6dbaec8c-55cd-402e-9f9b-8089ad5d8e88\",\n        \"Name\": \"RE 1 Unique identification and authentication\",\n        \"Description\": \"\",\n        \"subReqTypeIDs\": [],\n        \"RequiredPerLevel\": [\n          null,\n          null,\n          true,\n          true\n        ],\n        \"ReqFulfillRule\": {\n          \"SWRule\": {\n            \"ComponentTypeID\": \"75752ec0-7fa9-41a9-a06a-edcf890ca569\",\n            \"PropertyRest\": {\n              \"ID\": \"IsThirdParty\",\n              \"ComparisonType\": \"==\",\n              \"Value\": true\n            }\n          },\n          \"NeedsReview\": false\n        }\n      },\n      {\n        \"ID\": \"91a52e70-60f4-430c-b2f8-292e80931d70\",\n        \"Name\": \"RE 2 Multifactor authentication for all interfaces\",\n        \"Description\": \"\",\n        \"subReqTypeIDs\": [],\n        \"RequiredPerLevel\": [\n          null,\n          null,\n          null,\n          true\n        ],\n        \"ReqFulfillRule\": {\n          \"RuleType\": 1,\n          \"SWRule\": {\n            \"ComponentTypeID\": \"f049724d-ed42-4c16-af4e-9bcacffc7f0b\",\n            \"PropertyRest\": {\n              \"ID\": \"88763e20-7878-4525-81d8-c4d09b867042\",\n              \"ComparisonType\": \"==\",\n              \"Value\": true\n            }\n          },\n          \"NeedsReview\": true\n        }\n      }\n    ],\n    \"checklistTypes\": [\n      {\n        \"ID\": \"afc63fe6-27cc-4ab5-b44e-adcb29ecab49\",\n        \"Name\": \"IEC-62443\",\n        \"Description\": \"\",\n        \"requirementTypeIDs\": [\n          \"b008aede-3518-44f3-8cc2-7e92b68e0329\"\n        ],\n        \"Levels\": [\n          {\n            \"Name\": \"Security Level 1\",\n            \"Abbr\": \"SL1\",\n            \"Description\": \"\"\n          },\n          {\n            \"Name\": \"Security Level 2\",\n            \"Abbr\": \"SL2\",\n            \"Description\": \"\"\n          },\n          {\n            \"Name\": \"Security Level 3\",\n            \"Abbr\": \"SL3\",\n            \"Description\": \"\"\n          },\n          {\n            \"Name\": \"Security Level 4\",\n            \"Abbr\": \"SL4\",\n            \"Description\": \"\"\n          }\n        ]\n      }\n    ]\n  }\n}"}